<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>枢衡の巢</title>
  
  <subtitle>一只小乌鸦的学习日记</subtitle>
  <link href="https://www.crowhsu.top/atom.xml" rel="self"/>
  
  <link href="https://www.crowhsu.top/"/>
  <updated>2023-02-03T18:12:20.249Z</updated>
  <id>https://www.crowhsu.top/</id>
  
  <author>
    <name>Charles Hsu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>扩展式搜索框 | algolia魔改</title>
    <link href="https://www.crowhsu.top/posts/67ad6f26.html"/>
    <id>https://www.crowhsu.top/posts/67ad6f26.html</id>
    <published>2023-02-03T16:40:33.000Z</published>
    <updated>2023-02-03T18:12:20.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="扩展式搜索框-algolia魔改"><a href="#扩展式搜索框-algolia魔改" class="headerlink" title="扩展式搜索框 | algolia魔改"></a>扩展式搜索框 | algolia魔改</h1><p>我实在是无法接受<code>butterfly</code>自带的搜索框样式，看了<code>Heo</code>大佬的搜索栏格式也不是我想要的：</p><p>✅ 弹出动画<br>✅ 不影响主页面操作（可选）<br>✅ 搜索时滚动页面锁定导航栏（可选）<br>✅ 自适应布局<br>✅ 快捷键（可选）<br>✅ glassmorphism（可选）</p><p>（这里指的是<strong>我喜欢的搜索栏样式</strong>，不是指<strong>好的/正确的搜索栏样式</strong>）</p><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><strong>浅色模式</strong><br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202302040050189.gif" alt=""></p><p><strong>深色模式</strong><br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202302040105030.gif" alt=""></p><p><strong>移动设备</strong><br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202302040107812.gif" alt=""></p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><div class="note warning simple"><p>本魔改为我个人主题(未完成)中的一部分，未来可能持续更新，且有可能与其他魔改产生冲突</p></div><div class="note info simple"><p>butterfly 版本 4.6.1<br>hexo-algoliasearch 版本 0.3.2</p></div><p>对所有模块我都会提供<code>diff</code>和<code>source</code>两份代码，因为魔改量比较大（代码写的丑），推荐使用<code>source</code>版本直接替换</p><h3 id="修改-algolia-js"><a href="#修改-algolia-js" class="headerlink" title="修改 algolia.js"></a>修改 algolia.js</h3><p><code>butterfly\source\js\search\algolia.js</code>:</p><div class="tabs" id="code"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code-1">source</button></li><li class="tab"><button type="button" data-href="#code-2">diff</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">btf.<span class="title function_">animateIn</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#algolia-search .search-dialog&#x27;</span>), <span class="string">&#x27;titleScale 0.1s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">openSearch</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#algolia-search .ais-SearchBox-input&#x27;</span>).<span class="property">placeholder</span> = <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">algolia</span>.<span class="property">languages</span>.<span class="property">input_placeholder</span></span><br><span class="line">    <span class="keyword">const</span> bodyStyle = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span></span><br><span class="line">    bodyStyle.<span class="property">width</span> = <span class="string">&#x27;100%&#x27;</span></span><br><span class="line">    <span class="comment">// bodyStyle.overflow = &#x27;hidden&#x27;</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;header#page-header&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    btf.<span class="title function_">animateIn</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;search-mask&#x27;</span>), <span class="string">&#x27;to_show 0.5s&#x27;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#algolia-search .ais-SearchBox-input&#x27;</span>).<span class="title function_">focus</span>() &#125;, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shortcut: ESC</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (event.<span class="property">code</span> === <span class="string">&#x27;Escape&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">closeSearch</span>()</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, f)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">closeSearch</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;header#page-header&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#algolia-search .search-dialog&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ais-SearchBox input&#x27;</span>).<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#algolia-search .ais-SearchBox-input&#x27;</span>).<span class="property">placeholder</span> = <span class="string">&#x27;shift K&#x27;</span></span><br><span class="line">    btf.<span class="title function_">animateOut</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;search-mask&#x27;</span>), <span class="string">&#x27;to_hide 0.5s&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> bodyStyle = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span></span><br><span class="line">    bodyStyle.<span class="property">width</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    bodyStyle.<span class="property">overflow</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">searchClickFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Sbutton</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#algolia-search .search-dialog&#x27;</span>)</span><br><span class="line">    <span class="title class_">Sbutton</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Sbutton</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">      <span class="title function_">openSearch</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">searchClickFnOnce</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;search-mask&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, closeSearch)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#algolia-search .search-close-button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, closeSearch)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">cutContent</span> = content =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (content === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> firstOccur = content.<span class="title function_">indexOf</span>(<span class="string">&#x27;&lt;mark&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> start = firstOccur - <span class="number">30</span></span><br><span class="line">    <span class="keyword">let</span> end = firstOccur + <span class="number">120</span></span><br><span class="line">    <span class="keyword">let</span> pre = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> post = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (start &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      start = <span class="number">0</span></span><br><span class="line">      end = <span class="number">140</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pre = <span class="string">&#x27;...&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (end &gt; content.<span class="property">length</span>) &#123;</span><br><span class="line">      end = content.<span class="property">length</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      post = <span class="string">&#x27;...&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> matchContent = pre + content.<span class="title function_">substring</span>(start, end) + post</span><br><span class="line">    <span class="keyword">return</span> matchContent</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> algolia = <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">algolia</span></span><br><span class="line">  <span class="keyword">const</span> isAlgoliaValid = algolia.<span class="property">appId</span> &amp;&amp; algolia.<span class="property">apiKey</span> &amp;&amp; algolia.<span class="property">indexName</span></span><br><span class="line">  <span class="keyword">if</span> (!isAlgoliaValid) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Algolia setting is invalid!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> search = <span class="title function_">instantsearch</span>(&#123;</span><br><span class="line">    <span class="attr">indexName</span>: algolia.<span class="property">indexName</span>,</span><br><span class="line">    <span class="comment">/* global algoliasearch */</span></span><br><span class="line">    <span class="attr">searchClient</span>: <span class="title function_">algoliasearch</span>(algolia.<span class="property">appId</span>, algolia.<span class="property">apiKey</span>),</span><br><span class="line">    <span class="title function_">searchFunction</span>(<span class="params">helper</span>) &#123;</span><br><span class="line">      helper.<span class="property">state</span>.<span class="property">query</span> &amp;&amp; helper.<span class="title function_">search</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> configure = instantsearch.<span class="property">widgets</span>.<span class="title function_">configure</span>(&#123;</span><br><span class="line">    <span class="attr">hitsPerPage</span>: <span class="number">5</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> searchBox = instantsearch.<span class="property">widgets</span>.<span class="title function_">searchBox</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#algolia-search-input&#x27;</span>,</span><br><span class="line">    <span class="attr">showReset</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">showSubmit</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">placeholder</span>: <span class="string">&#x27;shift K&#x27;</span>,</span><br><span class="line">    <span class="attr">showLoadingIndicator</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">cssClasses</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> hits = instantsearch.<span class="property">widgets</span>.<span class="title function_">hits</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#algolia-hits&#x27;</span>,</span><br><span class="line">    <span class="attr">templates</span>: &#123;</span><br><span class="line">      <span class="title function_">item</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> link = data.<span class="property">permalink</span> ? data.<span class="property">permalink</span> : (<span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">root</span> + data.<span class="property">path</span>)</span><br><span class="line">        <span class="keyword">const</span> result = data.<span class="property">_highlightResult</span></span><br><span class="line">        <span class="keyword">const</span> content = result.<span class="property">contentStripTruncate</span></span><br><span class="line">          ? <span class="title function_">cutContent</span>(result.<span class="property">contentStripTruncate</span>.<span class="property">value</span>)</span><br><span class="line">          : result.<span class="property">contentStrip</span></span><br><span class="line">            ? <span class="title function_">cutContent</span>(result.<span class="property">contentStrip</span>.<span class="property">value</span>)</span><br><span class="line">            : result.<span class="property">content</span></span><br><span class="line">              ? <span class="title function_">cutContent</span>(result.<span class="property">content</span>.<span class="property">value</span>)</span><br><span class="line">              : <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;a href=&quot;<span class="subst">$&#123;link&#125;</span>&quot; class=&quot;algolia-hit-item-link&quot;&gt;</span></span><br><span class="line"><span class="string">          <span class="subst">$&#123;result.title.value || <span class="string">&#x27;no-title&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="string">          &lt;/a&gt;</span></span><br><span class="line"><span class="string">          &lt;p class=&quot;algolia-hit-item-content&quot;&gt;<span class="subst">$&#123;content&#125;</span>&lt;/p&gt;`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">empty</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="string">&#x27;&lt;div id=&quot;algolia-hits-empty&quot;&gt;&#x27;</span> +</span><br><span class="line">          <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">algolia</span>.<span class="property">languages</span>.<span class="property">hits_empty</span>.<span class="title function_">replace</span>(<span class="regexp">/\$\&#123;query&#125;/</span>, data.<span class="property">query</span>) +</span><br><span class="line">          <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stats = instantsearch.<span class="property">widgets</span>.<span class="title function_">stats</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#algolia-info &gt; .algolia-stats&#x27;</span>,</span><br><span class="line">    <span class="attr">templates</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> stats = <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">algolia</span>.<span class="property">languages</span>.<span class="property">hits_stats</span></span><br><span class="line">          .<span class="title function_">replace</span>(<span class="regexp">/\$\&#123;hits&#125;/</span>, data.<span class="property">nbHits</span>)</span><br><span class="line">          .<span class="title function_">replace</span>(<span class="regexp">/\$\&#123;time&#125;/</span>, data.<span class="property">processingTimeMS</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="string">`&lt;hr&gt;<span class="subst">$&#123;stats&#125;</span>`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> powerBy = instantsearch.<span class="property">widgets</span>.<span class="title function_">poweredBy</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#algolia-info &gt; .algolia-poweredBy&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pagination = instantsearch.<span class="property">widgets</span>.<span class="title function_">pagination</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#algolia-pagination&#x27;</span>,</span><br><span class="line">    <span class="attr">totalPages</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">templates</span>: &#123;</span><br><span class="line">      <span class="attr">first</span>: <span class="string">&#x27;&lt;i class=&quot;fas fa-angle-double-left&quot;&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class="line">      <span class="attr">last</span>: <span class="string">&#x27;&lt;i class=&quot;fas fa-angle-double-right&quot;&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class="line">      <span class="attr">previous</span>: <span class="string">&#x27;&lt;i class=&quot;fas fa-angle-left&quot;&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class="line">      <span class="attr">next</span>: <span class="string">&#x27;&lt;i class=&quot;fas fa-angle-right&quot;&gt;&lt;/i&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  search.<span class="title function_">addWidgets</span>([configure, searchBox, hits, stats, powerBy, pagination]) <span class="comment">// add the widgets to the instantsearch instance</span></span><br><span class="line"></span><br><span class="line">  search.<span class="title function_">start</span>()</span><br><span class="line"></span><br><span class="line">  <span class="title function_">searchClickFn</span>()</span><br><span class="line">  <span class="title function_">searchClickFnOnce</span>()</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:complete&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">getComputedStyle</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#algolia-search .search-dialog&#x27;</span>)).<span class="property">display</span> === <span class="string">&#x27;block&#x27;</span> &amp;&amp; <span class="title function_">closeSearch</span>()</span><br><span class="line">    <span class="title function_">searchClickFn</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">pjax</span> &amp;&amp; search.<span class="title function_">on</span>(<span class="string">&#x27;render&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">pjax</span>.<span class="title function_">refresh</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;algolia-hits&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code-2"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ btf.animateIn(document.querySelector(&#x27;#algolia-search .search-dialog&#x27;), &#x27;titleScale 0.1s&#x27;)</span></span><br><span class="line">window.addEventListener(&#x27;load&#x27;, () =&gt; &#123;</span><br><span class="line">    const openSearch = () =&gt; &#123;</span><br><span class="line">        + document.querySelector(&#x27;#algolia-search .ais-SearchBox-input&#x27;).placeholder = GLOBAL_CONFIG.algolia.languages.input_placeholder</span><br><span class="line">        const bodyStyle = document.body.style</span><br><span class="line">        bodyStyle.width = &#x27;100%&#x27;</span><br><span class="line"><span class="deletion">-        bodyStyle.overflow = &#x27;hidden&#x27;</span></span><br><span class="line"><span class="addition">+        document.querySelector(&#x27;header#page-header&#x27;).classList.add(&#x27;fixed&#x27;)</span></span><br><span class="line">        btf.animateIn(document.getElementById(&#x27;search-mask&#x27;), &#x27;to_show 0.5s&#x27;)</span><br><span class="line"><span class="deletion">-       btf.animateIn(document.querySelector(&#x27;#algolia-search .search-dialog&#x27;), &#x27;titleScale 0.5s&#x27;)</span></span><br><span class="line">        setTimeout(() =&gt; &#123; document.querySelector(&#x27;#algolia-search .ais-SearchBox-input&#x27;).focus() &#125;, 100)</span><br><span class="line">        // shortcut: ESC</span><br><span class="line">        document.addEventListener(&#x27;keydown&#x27;, function f(event) &#123;</span><br><span class="line">            if (event.code <span class="comment">=== &#x27;Escape&#x27;) &#123;</span></span><br><span class="line">                closeSearch()</span><br><span class="line">                document.removeEventListener(&#x27;keydown&#x27;, f)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    const closeSearch = () =&gt; &#123;</span><br><span class="line"><span class="addition">+        document.querySelector(&#x27;header#page-header&#x27;).classList.remove(&#x27;fixed&#x27;)</span></span><br><span class="line"><span class="addition">+        document.querySelector(&#x27;#algolia-search .search-dialog&#x27;).classList.remove(&#x27;active&#x27;)</span></span><br><span class="line"><span class="addition">+        document.querySelector(&#x27;.ais-SearchBox input&#x27;).value = &#x27;&#x27;</span></span><br><span class="line"><span class="addition">+        document.querySelector(&#x27;#algolia-search .ais-SearchBox-input&#x27;).placeholder = &#x27;shift K&#x27;</span></span><br><span class="line">        const bodyStyle = document.body.style</span><br><span class="line">        bodyStyle.width = &#x27;&#x27;</span><br><span class="line">        bodyStyle.overflow = &#x27;&#x27;</span><br><span class="line"><span class="deletion">-        btf.animateOut(document.querySelector(&#x27;#algolia-search .search-dialog&#x27;), &#x27;search_close .5s&#x27;)</span></span><br><span class="line"><span class="deletion">-        btf.animateOut(document.getElementById(&#x27;search-mask&#x27;), &#x27;to_hide 0.5s&#x27;)</span></span><br><span class="line">    &#125;</span><br><span class="line">    const searchClickFn = () =&gt; &#123;</span><br><span class="line"><span class="deletion">-        document.querySelector(&#x27;#search-button &gt; .search&#x27;).addEventListener(&#x27;click&#x27;, openSearch)</span></span><br><span class="line">        const Sbutton = document.querySelector(&#x27;#algolia-search .search-dialog&#x27;)</span><br><span class="line">        Sbutton.onclick = function () &#123;</span><br><span class="line">            Sbutton.classList.add(&#x27;active&#x27;)</span><br><span class="line">            openSearch()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    const searchClickFnOnce = () =&gt; &#123;</span><br><span class="line">        document.getElementById(&#x27;search-mask&#x27;).addEventListener(&#x27;click&#x27;, closeSearch)</span><br><span class="line">        document.querySelector(&#x27;#algolia-search .search-close-button&#x27;).addEventListener(&#x27;click&#x27;, closeSearch)</span><br><span class="line">    &#125;</span><br><span class="line">    const cutContent = content =&gt; &#123;</span><br><span class="line">        if (content <span class="comment">=== &#x27;&#x27;) return &#x27;&#x27;</span></span><br><span class="line">        const firstOccur = content.indexOf(&#x27;&lt;mark&gt;&#x27;)</span><br><span class="line">        let start = firstOccur - 30</span><br><span class="line">        let end = firstOccur + 120</span><br><span class="line">        let pre = &#x27;&#x27;</span><br><span class="line">        let post = &#x27;&#x27;</span><br><span class="line">        if (start &lt;= 0) &#123;</span><br><span class="line">            start = 0</span><br><span class="line">            end = 140</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            pre = &#x27;...&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        if (end &gt; content.length) &#123;</span><br><span class="line">            end = content.length</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            post = &#x27;...&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        const matchContent = pre + content.substring(start, end) + post</span><br><span class="line">        return matchContent</span><br><span class="line">    &#125;</span><br><span class="line">    const algolia = GLOBAL_CONFIG.algolia</span><br><span class="line">    const isAlgoliaValid = algolia.appId &amp;&amp; algolia.apiKey &amp;&amp; algolia.indexName</span><br><span class="line">    if (!isAlgoliaValid) &#123;</span><br><span class="line">        return console.error(&#x27;Algolia setting is invalid!&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    const search = instantsearch(&#123;</span><br><span class="line">        indexName: algolia.indexName,</span><br><span class="line">        /* global algoliasearch */</span><br><span class="line">        searchClient: algoliasearch(algolia.appId, algolia.apiKey),</span><br><span class="line">        searchFunction(helper) &#123;</span><br><span class="line">            helper.state.query &amp;&amp; helper.search()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const configure = instantsearch.widgets.configure(&#123;</span><br><span class="line">        hitsPerPage: 5</span><br><span class="line">    &#125;)</span><br><span class="line">    const searchBox = instantsearch.widgets.searchBox(&#123;</span><br><span class="line">        container: &#x27;#algolia-search-input&#x27;,</span><br><span class="line">        showReset: false,</span><br><span class="line">        showSubmit: false,</span><br><span class="line"><span class="addition">+        placeholder: &#x27;shift K&#x27;,</span></span><br><span class="line"><span class="deletion">-        placeholder: GLOBAL_CONFIG.algolia.languages.input_placeholder,</span></span><br><span class="line">        showLoadingIndicator: true,</span><br><span class="line"><span class="addition">+        cssClasses: &#123;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const hits = instantsearch.widgets.hits(&#123;</span><br><span class="line">        container: &#x27;#algolia-hits&#x27;,</span><br><span class="line">        templates: &#123;</span><br><span class="line">            item(data) &#123;</span><br><span class="line">                const link = data.permalink ? data.permalink : (GLOBAL_CONFIG.root + data.path)</span><br><span class="line">                const result = data._highlightResult</span><br><span class="line">                const content = result.contentStripTruncate</span><br><span class="line">                    ? cutContent(result.contentStripTruncate.value)</span><br><span class="line">                    : result.contentStrip</span><br><span class="line">                        ? cutContent(result.contentStrip.value)</span><br><span class="line">                        : result.content</span><br><span class="line">                            ? cutContent(result.content.value)</span><br><span class="line">                            : &#x27;&#x27;</span><br><span class="line">                return `</span><br><span class="line">            &lt;a href=&quot;$&#123;link&#125;&quot; class=&quot;algolia-hit-item-link&quot;&gt;</span><br><span class="line">            $&#123;result.title.value || &#x27;no-title&#x27;&#125;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;p class=&quot;algolia-hit-item-content&quot;&gt;$&#123;content&#125;&lt;/p&gt;`</span><br><span class="line">            &#125;,</span><br><span class="line">            empty: function (data) &#123;</span><br><span class="line">                return (</span><br><span class="line">                    &#x27;&lt;div id=&quot;algolia-hits-empty&quot;&gt;&#x27; +</span><br><span class="line">                    GLOBAL_CONFIG.algolia.languages.hits_empty.replace(/\$\&#123;query&#125;/, data.query) +</span><br><span class="line">                    &#x27;&lt;/div&gt;&#x27;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const stats = instantsearch.widgets.stats(&#123;</span><br><span class="line">        container: &#x27;#algolia-info &gt; .algolia-stats&#x27;,</span><br><span class="line">        templates: &#123;</span><br><span class="line">            text: function (data) &#123;</span><br><span class="line">                const stats = GLOBAL_CONFIG.algolia.languages.hits_stats</span><br><span class="line">                    .replace(/\$\&#123;hits&#125;/, data.nbHits)</span><br><span class="line">                    .replace(/\$\&#123;time&#125;/, data.processingTimeMS)</span><br><span class="line">                return (</span><br><span class="line">                    `&lt;hr&gt;$&#123;stats&#125;`</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const powerBy = instantsearch.widgets.poweredBy(&#123;</span><br><span class="line">        container: &#x27;#algolia-info &gt; .algolia-poweredBy&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    const pagination = instantsearch.widgets.pagination(&#123;</span><br><span class="line">        container: &#x27;#algolia-pagination&#x27;,</span><br><span class="line">        totalPages: 5,</span><br><span class="line">        templates: &#123;</span><br><span class="line">            first: &#x27;&lt;i class=&quot;fas fa-angle-double-left&quot;&gt;&lt;/i&gt;&#x27;,</span><br><span class="line">            last: &#x27;&lt;i class=&quot;fas fa-angle-double-right&quot;&gt;&lt;/i&gt;&#x27;,</span><br><span class="line">            previous: &#x27;&lt;i class=&quot;fas fa-angle-left&quot;&gt;&lt;/i&gt;&#x27;,</span><br><span class="line">            next: &#x27;&lt;i class=&quot;fas fa-angle-right&quot;&gt;&lt;/i&gt;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    search.addWidgets([configure, searchBox, hits, stats, powerBy, pagination]) // add the widgets to the instantsearch instance</span><br><span class="line">    search.start()</span><br><span class="line">    searchClickFn()</span><br><span class="line">    searchClickFnOnce()</span><br><span class="line">    window.addEventListener(&#x27;pjax:complete&#x27;, () =&gt; &#123;</span><br><span class="line">        getComputedStyle(document.querySelector(&#x27;#algolia-search .search-dialog&#x27;)).display <span class="comment">=== &#x27;block&#x27; &amp;&amp; closeSearch()</span></span><br><span class="line">        searchClickFn()</span><br><span class="line">    &#125;)</span><br><span class="line">    window.pjax &amp;&amp; search.on(&#x27;render&#x27;, () =&gt; &#123;</span><br><span class="line">        window.pjax.refresh(document.getElementById(&#x27;algolia-hits&#x27;))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="修改-nav-pug"><a href="#修改-nav-pug" class="headerlink" title="修改 nav.pug"></a>修改 nav.pug</h3><p><code>themes\butterfly\layout\includes\header\nav.pug</code>:</p><div class="tabs" id="code"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code-1">source</button></li><li class="tab"><button type="button" data-href="#code-2">diff</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">nav#nav</span><br><span class="line">  span#blog-info</span><br><span class="line">    a(href=url_for(&#x27;/&#x27;) title=config.title)</span><br><span class="line">      if theme.nav.logo</span><br><span class="line">        img.site-icon(src=url_for(theme.nav.logo))</span><br><span class="line">      if theme.nav.display_title</span><br><span class="line">        span.site-name=config.title</span><br><span class="line">    </span><br><span class="line">  #menus</span><br><span class="line">    if (theme.algolia_search.enable || theme.local_search.enable)</span><br><span class="line">    #algolia-search</span><br><span class="line">      .search-dialog</span><br><span class="line">        .search-wrap</span><br><span class="line">          #algolia-search-input</span><br><span class="line">            #search-hover</span><br><span class="line">              #search-button</span><br><span class="line">                a.search(href=&quot;javascript:void(0);&quot;)</span><br><span class="line">                  i.fas.fa-search.fa-fw</span><br><span class="line">          hr</span><br><span class="line">          #algolia-search-results</span><br><span class="line">            #algolia-hits</span><br><span class="line">            #algolia-pagination</span><br><span class="line">            #algolia-info</span><br><span class="line">              .algolia-stats</span><br><span class="line">              .algolia-poweredBy</span><br><span class="line">      #search-mask</span><br><span class="line">      </span><br><span class="line">    !=partial(&#x27;includes/header/menu_item&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"></span><br><span class="line">    #toggle-menu</span><br><span class="line">      a.site-page(href=&quot;javascript:void(0);&quot;)</span><br><span class="line">        i.fas.fa-bars.fa-fw</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code-2"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">nav#nav</span><br><span class="line">  span#blog-info</span><br><span class="line">    a(href=url_for(&#x27;/&#x27;) title=config.title)</span><br><span class="line">      if theme.nav.logo</span><br><span class="line">        img.site-icon(src=url_for(theme.nav.logo))</span><br><span class="line">      if theme.nav.display_title</span><br><span class="line">        span.site-name=config.title</span><br><span class="line">    </span><br><span class="line">  #menus</span><br><span class="line">    if (theme.algolia_search.enable || theme.local_search.enable)</span><br><span class="line"><span class="deletion">-    #search-button</span></span><br><span class="line"><span class="deletion">-      a.site-page.social-icon.search(href=&quot;javascript:void(0);&quot;)</span></span><br><span class="line"><span class="deletion">-        i.fas.fa-search.fa-fw</span></span><br><span class="line"><span class="deletion">-        span=&#x27; &#x27;+_p(&#x27;search.title&#x27;)</span></span><br><span class="line"><span class="addition">+    #algolia-search</span></span><br><span class="line"><span class="addition">+      .search-dialog</span></span><br><span class="line"><span class="addition">+        .search-wrap</span></span><br><span class="line"><span class="addition">+          #algolia-search-input</span></span><br><span class="line"><span class="addition">+            #search-hover</span></span><br><span class="line"><span class="addition">+              #search-button</span></span><br><span class="line"><span class="addition">+                a.search(href=&quot;javascript:void(0);&quot;)</span></span><br><span class="line"><span class="addition">+                  i.fas.fa-search.fa-fw</span></span><br><span class="line"><span class="addition">+          hr</span></span><br><span class="line"><span class="addition">+          #algolia-search-results</span></span><br><span class="line"><span class="addition">+            #algolia-hits</span></span><br><span class="line"><span class="addition">+            #algolia-pagination</span></span><br><span class="line"><span class="addition">+            #algolia-info</span></span><br><span class="line"><span class="addition">+              .algolia-stats</span></span><br><span class="line"><span class="addition">+              .algolia-poweredBy</span></span><br><span class="line"><span class="addition">+      #search-mask</span></span><br><span class="line">    !=partial(&#x27;includes/header/menu_item&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"></span><br><span class="line">    #toggle-menu</span><br><span class="line">      a.site-page(href=&quot;javascript:void(0);&quot;)</span><br><span class="line">        i.fas.fa-bars.fa-fw</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="添加样式文件"><a href="#添加样式文件" class="headerlink" title="添加样式文件"></a>添加样式文件</h3><p>需要自己添加引用</p><p><strong>样式</strong><br><code>nav.css</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 导航栏布局更改 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#menus</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 确保透明蒙版可点击 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#search-mask</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: default;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主体 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search-dialog</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: static <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1001</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">36px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 搜索模式 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">80vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-class">.active</span> <span class="selector-class">.ais-SearchBox</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--hsu-theme-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-class">.active</span> <span class="selector-class">.search-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--hsu-glass-bg);</span><br><span class="line">    backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">12px</span> -<span class="number">4px</span> <span class="built_in">rgb</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> / <span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">6</span>);</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-class">.active</span> <span class="selector-id">#algolia-search-results</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 隐藏模式 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>)<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--hsu-input-bg);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>)<span class="selector-pseudo">:hover</span> <span class="selector-class">.ais-SearchBox</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--hsu-theme-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>) hr,</span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>) <span class="selector-id">#algolia-search-results</span>,</span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>) <span class="selector-id">#algolia-search-results</span> * &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>) <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">caret-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>) <span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--hsu-font-light);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--hsu-font-light);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 其他格式 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span> <span class="selector-class">.ais-SearchBox</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#algolia-search</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ais-SearchBox</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--hsu-input-bg);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ais-SearchBox</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">9px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;\f002&#x27;</span>;</span><br><span class="line">    <span class="attribute">font</span>: <span class="built_in">var</span>(--fa-font-solid);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ais-SearchBox-form</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">36px</span> - <span class="number">24px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search-wrap</span> hr &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: visible;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1rem</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--hsu-font-light);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span> <span class="selector-class">.ais-Pagination</span> <span class="selector-class">.ais-Pagination-item--selected</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--hsu-theme-color) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 深色模式 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.ais-SearchBox</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--hsu-input-bg-dark);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>)<span class="selector-pseudo">:hover</span> <span class="selector-class">.ais-SearchBox</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">var</span>(--hsu-font-light);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>) <span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--hsu-theme-color-dark);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--hsu-theme-color-dark);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-class">.active</span> <span class="selector-class">.search-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">1</span>);</span><br><span class="line">    backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">12px</span> -<span class="number">4px</span> <span class="built_in">rgb</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> / <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-id">#algolia-search</span> <span class="selector-class">.search-dialog</span><span class="selector-class">.active</span> <span class="selector-class">.ais-SearchBox</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--hsu-font-light);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nobody.css</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">*::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*::-webkit-scrollbar-track &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search-wrap</span> *::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--none) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>变量</strong><br><code>var.css</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--hsu-theme-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attr">--hsu-theme-color-dark</span>: <span class="number">#1f1f1f</span>;</span><br><span class="line">    <span class="attr">--hsu-input-bg</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">    <span class="attr">--hsu-glass-bg</span>: <span class="built_in">linear-gradient</span>(to bottom right, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">8</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">5</span>));</span><br><span class="line">    <span class="attr">--hsu-font-light</span>: <span class="number">#bbb</span>;</span><br><span class="line">    <span class="attr">--hsu-input-bg-dark</span>: <span class="number">#111111</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快捷键</strong></p><p><code>shortcut.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">        <span class="keyword">if</span> (event.<span class="property">shiftKey</span> &amp;&amp; (event.<span class="property">key</span> === <span class="string">&#x27;k&#x27;</span> || event.<span class="property">key</span> === <span class="string">&#x27;K&#x27;</span>)) &#123;</span><br><span class="line">            <span class="title function_">openSearch</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>基本就是这些了，在全部主题完成之前会一直更新，如果有什么问题或者BUG反馈在下面评论即可，看到之后会第一时间回复。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;扩展式搜索框-algolia魔改&quot;&gt;&lt;a href=&quot;#扩展式搜索框-algolia魔改&quot; class=&quot;headerlink&quot; title=&quot;扩展式搜索框 | algolia魔改&quot;&gt;&lt;/a&gt;扩展式搜索框 | algolia魔改&lt;/h1&gt;&lt;p&gt;我实在是无法接受&lt;c</summary>
      
    
    
    
    <category term="博客美化" scheme="https://www.crowhsu.top/categories/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>SolidWorks 2021</title>
    <link href="https://www.crowhsu.top/posts/6287ead9.html"/>
    <id>https://www.crowhsu.top/posts/6287ead9.html</id>
    <published>2023-01-30T13:56:50.000Z</published>
    <updated>2023-01-30T16:21:31.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SolidWorks-2021"><a href="#SolidWorks-2021" class="headerlink" title="SolidWorks-2021"></a>SolidWorks-2021</h1><div class="flink"><div class="flink-name">下载地址 👇</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/file/sw/solidworks2021%20sp5.zip" title="SolidWorks-2021" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301302202884.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="SolidWorks-2021" />              </div>              <div class="flink-item-name">SolidWorks-2021</div>               <div class="flink-item-desc" title="SolidWorks-2021">SolidWorks-2021</div>            </a>          </div></div></div><p>(本下载链接为私人盘，重复使用该链接大概率导致博主经济压力骤增😢)</p><h1 id="安装过程："><a href="#安装过程：" class="headerlink" title="安装过程："></a>安装过程：</h1><ol><li>下载 - 右键 - 解压到<code>solidworks2021 sp5</code></li><li>注册表导入：<ol><li>进入<code>\solidworks2021 sp5\Solidworks2021注册文件</code></li><li>运行<code>sw2021_network_serials_licensing.reg</code><br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301302220955.gif" alt=""></li></ol></li><li>安装：<ol><li>进入<code>\solidworks2021 sp5\solidworks2021 sp5安装程序</code></li><li>右键<code>setup.exe</code>，选择<code>以管理员身份运行</code><br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301302342728.gif" alt=""></li><li>无脑下一步，(<code>摘要</code>界面可以更改安装位置)</li><li>序列号无用不影响安装，若心理接受不了可以选择断网安装(图示即为断网安装)<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301302342412.gif" alt=""></li></ol></li><li>激活：<ol><li>进入<code>Solid Works</code>安装路径，也就是安装时选择的路径，忘记的话可以右键SolidWorks快捷方式，选择属性<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301310012321.png" alt=""><br>其中起始位置的上层目录即为安装路径，我这里即为<code>E:\</code></li><li>将<code>\solidworks2021 sp5\Solidworks2021注册文件\Program Files\SOLIDWORKS Corp</code>内全部内容粘贴到安装目录下，相同文件选择替换，比如我这里是直接粘贴进<code>E:\</code></li><li>将<code>\solidworks2021 sp5\Solidworks2021注册文件\SolidWorks_Flexnet_Server</code>整个文件夹复制到<code>C</code>盘，进入<code>C:\SolidWorks_Flexnet_Server</code>，右键<code>server_install.bat</code>，<code>以管理员身份运行</code><br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301310018941.gif" alt=""></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SolidWorks-2021&quot;&gt;&lt;a href=&quot;#SolidWorks-2021&quot; class=&quot;headerlink&quot; title=&quot;SolidWorks-2021&quot;&gt;&lt;/a&gt;SolidWorks-2021&lt;/h1&gt;&lt;div class=&quot;flink&quot;&gt;&lt;d</summary>
      
    
    
    
    <category term="软件分享" scheme="https://www.crowhsu.top/categories/%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="tool" scheme="https://www.crowhsu.top/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly主题卡片式页脚</title>
    <link href="https://www.crowhsu.top/posts/c822e518.html"/>
    <id>https://www.crowhsu.top/posts/c822e518.html</id>
    <published>2023-01-28T15:29:21.000Z</published>
    <updated>2023-01-28T17:05:24.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Butterfly主题卡片式页脚"><a href="#Butterfly主题卡片式页脚" class="headerlink" title="Butterfly主题卡片式页脚"></a>Butterfly主题卡片式页脚</h1><p>之前根据 <a href="https://blog.jayhrn.com/">Jayhrn</a> 的 <a href="https://blog.jayhrn.com/posts/eaf618d9.html">Butterfly主题页脚美化</a> 修改了本博客的页脚，最近放假比较闲，刚好可以复健一下前端…… 所以对页脚做了一些简单的修改：<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301282335416.png" alt=""></p><p>其中页脚按钮部分用<code>css</code>做了简单的动画：<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301282337522.gif" alt=""></p><hr><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="修改-pug-文件"><a href="#修改-pug-文件" class="headerlink" title="修改 pug 文件"></a>修改 pug 文件</h3><p>页脚的<code>html(pug)</code>文件路径为<code>themes/butterfly/layout/includes/footer.pug</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">//- 页脚按钮</span><br><span class="line">#footer_button</span><br><span class="line">  ul.buttons</span><br><span class="line">    li.icon.Email</span><br><span class="line">      span.bubble Email</span><br><span class="line">      a(href=&#x27;mailto:charles_hsu@qq.com&#x27;)</span><br><span class="line">        i.fa-solid.fa-envelope</span><br><span class="line">    li.icon.QQ</span><br><span class="line">      span.bubble QQ</span><br><span class="line">      a(href=&#x27;tencent://Message/?Uin=1191393280&amp;websiteName=q-zone.qq.com&amp;Menu=yes&#x27;)</span><br><span class="line">        i.fa-brands.fa-qq</span><br><span class="line">    li.icon.top</span><br><span class="line">      span.bubble top</span><br><span class="line">      a(href=&#x27;#&#x27;)</span><br><span class="line">        i.fa-solid.fa-angle-up</span><br><span class="line">    li.icon.github</span><br><span class="line">      span.bubble Github</span><br><span class="line">      a(href=&#x27;https://github.com/charles-hsuz&#x27;)</span><br><span class="line">        i.fab.fa-github</span><br><span class="line">    li.icon.CSDN</span><br><span class="line">      span.bubble CSDN</span><br><span class="line">      a(href=&#x27;https://blog.csdn.net/CharlesHsuu?type=blog&#x27;)</span><br><span class="line">        i.fa-solid.fa-copyright</span><br><span class="line"></span><br><span class="line">//- 真正的页脚卡片</span><br><span class="line">#Hsu-foot</span><br><span class="line">  .footer-group</span><br><span class="line">    h3.footer-title 直达</span><br><span class="line">    .footer-links</span><br><span class="line">      a.footer-item(href=&quot;/&quot; target=&quot;_blank&quot;) 我的主页</span><br><span class="line">      a.footer-item(href=&quot;/bb&quot;) 个人动态</span><br><span class="line">      a.footer-item(href=&quot;/random/index.html&quot;) 随机文章</span><br><span class="line">  .footer-group</span><br><span class="line">    h3.footer-title 分类</span><br><span class="line">    .footer-links</span><br><span class="line">      a.footer-item(href=&quot;/categories/学习笔记/&quot;) 学习笔记</span><br><span class="line">      a.footer-item(href=&quot;/categories/算法教程/&quot;) 算法教程</span><br><span class="line">      a.footer-item(href=&quot;/categories/刷题笔记/&quot;) 刷题笔记</span><br><span class="line">      a.footer-item(href=&quot;/categories/语法教程/&quot;) 语法教程</span><br><span class="line">      a.footer-item(href=&quot;/categories/工具分享/&quot;) 工具分享</span><br><span class="line">  .footer-group</span><br><span class="line">    h3.footer-title 关于</span><br><span class="line">    .footer-links</span><br><span class="line">      a.footer-item(href=&quot;/about&quot;) 关于我</span><br><span class="line">      a.footer-item(href=&quot;/charts&quot;) 博客统计</span><br><span class="line">      a.footer-item(href=&quot;/archives&quot;) 文章归档</span><br><span class="line">  .footer-group</span><br><span class="line">    h3.footer-title 友链</span><br><span class="line">    .footer-links</span><br><span class="line">      a.footer-item(href=&quot;/link&quot;) 在这里 ✨</span><br><span class="line">      a.footer-item(href=&quot;mailto:charles_hsu@qq.com&quot;) 广告位招租啦</span><br><span class="line">  .footer-group</span><br><span class="line">    h3.footer-title 协议</span><br><span class="line">    .footer-links</span><br><span class="line">      a.footer-item(href=&quot;/privacy&quot;) 隐私协议</span><br><span class="line">      a.footer-item(href=&quot;/cookies&quot;) Cookie</span><br><span class="line">      a.footer-item(href=&quot;/cc&quot;) 版权协议</span><br><span class="line"></span><br><span class="line">//- 页脚徽章</span><br><span class="line">p#footer-badges</span><br><span class="line">  a.badge(target=&#x27;_blank&#x27; href=&#x27;https://icp.gov.moe/?keyword=20230318&#x27; title=&#x27;萌ICP备20230318号&#x27;)</span><br><span class="line">    img.badge(src=&#x27;https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301280632199.svg&#x27;)</span><br><span class="line"></span><br><span class="line">  a.badge(target=&#x27;_blank&#x27; href=&#x27;https://hexo.io/zh-cn/&#x27; title=&#x27;基于Hexo v6.3.0&#x27;)</span><br><span class="line">    img.badge(src=&#x27;https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301281630150.svg&#x27;)</span><br><span class="line"></span><br><span class="line">  a.badge(target=&#x27;_blank&#x27; href=&#x27;https://butterfly.js.org/&#x27; title=&#x27;主题基于Butterfly v4.6.1&#x27;)</span><br><span class="line">    img.badge(src=&#x27;https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301281634747.svg&#x27;)</span><br><span class="line"></span><br><span class="line">  a.badge(target=&#x27;_blank&#x27; href=&#x27;https://github.com/charles-hsuz/charles-hsuz.github.io&#x27; title=&#x27;版本控制由github提供&#x27;)</span><br><span class="line">    img.badge(src=&#x27;https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301281637830.svg&#x27;)</span><br><span class="line"></span><br><span class="line">  a.badge(target=&#x27;_blank&#x27; href=&#x27;https://cloud.tencent.com/&#x27; title=&#x27;本博客托管于腾讯云&#x27;)</span><br><span class="line">    img.badge(src=&#x27;https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301281651362.svg&#x27;)</span><br></pre></td></tr></table></figure><p>其中使用了 <a href="https://fontawesome.com/icons?from=io">font-awesome v6</a> 图标，可以自行修改<br>也可以参照 <a href="https://akilar.top/">Akilarの糖果屋</a> 的 <a href="https://akilar.top/posts/d2ebecef/">Iconfont Inject</a> 引入阿里图标</p><h2 id="引入-css-文件"><a href="#引入-css-文件" class="headerlink" title="引入 css 文件"></a>引入 css 文件</h2><p>如果不知道如何自定义<code>css</code>文件，可以参照 <a href="https://blog.leonus.cn/2022/custom.html">Hexo博客添加自定义css和js文件</a> - Leonus </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页脚按钮 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff8fb76</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer_button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    justify-items: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2rem</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer_button</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.6rem</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.3rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1.3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    justify-items: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>,<span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.icon</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    justify-items: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.68</span>, -<span class="number">0.55</span>, <span class="number">0.265</span>, <span class="number">1.55</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#4c4948</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.bubble</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.68</span>, -<span class="number">0.55</span>, <span class="number">0.265</span>, <span class="number">1.55</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.bubble</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.68</span>, -<span class="number">0.55</span>, <span class="number">0.265</span>, <span class="number">1.55</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.icon</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: visible;</span><br><span class="line">    <span class="attribute">pointer-events</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.icon</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.icon</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0px</span> -<span class="number">1px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.Email</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.Email</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span>,</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.Email</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#1877F2</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.Email</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.QQ</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.QQ</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span>,</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.QQ</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#1DA1F2</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.QQ</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.top</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.top</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span>,</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.top</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#cfcacea5</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.top</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.github</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.github</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span>,</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.github</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333333</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.github</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.CSDN</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.CSDN</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span>,</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.CSDN</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#CD201F</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.buttons</span> <span class="selector-class">.CSDN</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自适应 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">780px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.buttons</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1450px</span>) <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">780px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.buttons</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1220px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#Hsu-foot</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: auto <span class="meta">!important</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: auto <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* dark ♂ mode */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#313131</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#Hsu-foot</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#121212</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;light&quot;</span>]</span> <span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">0%</span>,<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">18%</span>, <span class="number">#ffffff</span> <span class="number">97%</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 深色模式的按钮全部是黑白色 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.buttons</span> <span class="selector-class">.icon</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.buttons</span> <span class="selector-class">.icon</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.buttons</span> <span class="selector-class">.icon</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.buttons</span> <span class="selector-class">.icon</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bubble</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.buttons</span> <span class="selector-class">.icon</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#121212</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页脚 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#Hsu-foot</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">2</span>fr);</span><br><span class="line">    <span class="attribute">column-gap</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1170px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">9px</span> <span class="number">10px</span> <span class="number">16px</span> <span class="number">3px</span> <span class="built_in">rgb</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> / <span class="number">10%</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#Hsu-foot</span> <span class="selector-class">.footer-group</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">0</span>fr <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#Hsu-foot</span> <span class="selector-class">.footer-title</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#Hsu-foot</span> <span class="selector-class">.footer-links</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-auto-rows</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#Hsu-foot</span> <span class="selector-class">.footer-item</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: .<span class="number">8rem</span>;</span><br><span class="line">    <span class="attribute">margin</span>: .<span class="number">38rem</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--Jay-fontcolor);</span><br><span class="line">    <span class="comment">/*margin-right: auto*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 徽章 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-badges</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1170px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-badges</span> <span class="selector-class">.badge</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">25px</span> <span class="number">5px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不得不承认，我这css写的属实有点拉胯，各位实装之后可以按照自己所需进行更改</p><p>PS：为了适应渐变式的页脚背景，我在 <code>foot.css</code> 中修改了 <code>body</code> 的样式，没有此需求的童鞋可以自行删除</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Butterfly主题卡片式页脚&quot;&gt;&lt;a href=&quot;#Butterfly主题卡片式页脚&quot; class=&quot;headerlink&quot; title=&quot;Butterfly主题卡片式页脚&quot;&gt;&lt;/a&gt;Butterfly主题卡片式页脚&lt;/h1&gt;&lt;p&gt;之前根据 &lt;a href=&quot;</summary>
      
    
    
    
    <category term="博客美化" scheme="https://www.crowhsu.top/categories/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义控制台字符画</title>
    <link href="https://www.crowhsu.top/posts/9561cdd8.html"/>
    <id>https://www.crowhsu.top/posts/9561cdd8.html</id>
    <published>2023-01-22T03:23:46.000Z</published>
    <updated>2023-01-22T03:29:53.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义控制台字符画"><a href="#自定义控制台字符画" class="headerlink" title="自定义控制台字符画"></a>自定义控制台字符画</h1><p>最近逛街(怎么最近一直在逛gai)，看到好多友人(果然功能都是抄来的是吧)都有控制台字符画(比如某站):<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301221126999.png" alt=""></p><p>所以干脆自己的博客也部署一个：<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301221127536.png" alt=""></p><p>代码本身很简单，就只是单纯输出而已(<del>果然是在水博客吧</del>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`</span></span><br><span class="line"><span class="string"> _    _           _       ____  _             _ </span></span><br><span class="line"><span class="string">| |  | |         ( )     |  _ \\| |           | |</span></span><br><span class="line"><span class="string">| |__| |___ _   _|/ ___  | |_) | | ___   __ _| |</span></span><br><span class="line"><span class="string">|  __  / __| | | | / __| |  _ &lt;| |/ _ \\ / _\` | |</span></span><br><span class="line"><span class="string">| |  | \\__ \\ |_| | \\__ \\ | |_) | | (_) | (_| |_|</span></span><br><span class="line"><span class="string">|_|  |_|___/\\__,_| |___/ |____/|_|\\___/ \\__, (_)</span></span><br><span class="line"><span class="string">                                         __/ |  </span></span><br><span class="line"><span class="string">                                        |___/  </span></span><br><span class="line"><span class="string">`</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义控制台字符画&quot;&gt;&lt;a href=&quot;#自定义控制台字符画&quot; class=&quot;headerlink&quot; title=&quot;自定义控制台字符画&quot;&gt;&lt;/a&gt;自定义控制台字符画&lt;/h1&gt;&lt;p&gt;最近逛街(怎么最近一直在逛gai)，看到好多友人(果然功能都是抄来的是吧)都有控制台</summary>
      
    
    
    
    <category term="博客美化" scheme="https://www.crowhsu.top/categories/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>博客失去焦点时改变标题</title>
    <link href="https://www.crowhsu.top/posts/fbf212fd.html"/>
    <id>https://www.crowhsu.top/posts/fbf212fd.html</id>
    <published>2023-01-21T15:20:36.000Z</published>
    <updated>2023-01-21T15:41:01.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客失去焦点时改变标题"><a href="#博客失去焦点时改变标题" class="headerlink" title="博客失去焦点时改变标题"></a>博客失去焦点时改变标题</h1><p>最近“逛街”发现各位友人的博客都会在失去焦点后改变页面标题，于是稍微研究了一下（其实是个很简单的功能，学过<code>js</code>都会写，但<del>毕竟能水一篇博客</del>）</p><p>首先引入我们的<code>js</code>文件，修改主题目录的<code>_config.yml</code>文件:<br><em>PS: 基于 Butterfly 主题，其他主题或原生 Hexo 博客请自行做迁移</em><br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> inject:</span><br><span class="line">     head:</span><br><span class="line">     bottom:</span><br><span class="line"><span class="addition">+       - &lt;script src=&quot;/js/costum.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><br>并在主题目录下<code>/source/js/</code>中创建<code>costum.js</code>文件（已有自定义<code>js</code>文件只要进行修改即可），内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> old_title = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line"><span class="keyword">var</span> time_count;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">        time_count = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;(つェ⊂)我藏好了哦~ &#x27;</span>;</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(time_count);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = old_title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果不想要计时功能(页面失去焦点超过<code>1000 ms</code>才会改变页面标题)，只需：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> var old_title = document.title;</span><br><span class="line"> var time_count;</span><br><span class="line"> document.addEventListener(&#x27;visibilitychange&#x27;, function() &#123;</span><br><span class="line"><span class="deletion">-    if (document.hidden) &#123;</span></span><br><span class="line"><span class="deletion">-        time_count = setTimeout(function()&#123;</span></span><br><span class="line"><span class="deletion">-            document.title = &#x27;(つェ⊂)我藏好了哦~ &#x27;;</span></span><br><span class="line"><span class="deletion">-        &#125;,1000);</span></span><br><span class="line"><span class="addition">+            document.title = &#x27;(つェ⊂)我藏好了哦~ &#x27;;</span></span><br><span class="line">     &#125; else &#123;</span><br><span class="line"><span class="deletion">-        clearTimeout(time_count);</span></span><br><span class="line">         document.title = old_title;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;博客失去焦点时改变标题&quot;&gt;&lt;a href=&quot;#博客失去焦点时改变标题&quot; class=&quot;headerlink&quot; title=&quot;博客失去焦点时改变标题&quot;&gt;&lt;/a&gt;博客失去焦点时改变标题&lt;/h1&gt;&lt;p&gt;最近“逛街”发现各位友人的博客都会在失去焦点后改变页面标题，于是稍微</summary>
      
    
    
    
    <category term="博客美化" scheme="https://www.crowhsu.top/categories/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>岁幕夜省</title>
    <link href="https://www.crowhsu.top/posts/7e751aa7.html"/>
    <id>https://www.crowhsu.top/posts/7e751aa7.html</id>
    <published>2023-01-17T18:50:54.000Z</published>
    <updated>2023-01-17T19:42:31.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="岁暮夜省"><a href="#岁暮夜省" class="headerlink" title="岁暮夜省"></a>岁暮夜省</h1><p>寒假已去其半，我不得不重审自己此前的“计划”，却只觉羞愧，自放假到如今临近年关，真正做到的不及三成。与亲友闲叙，总说自己有诸多事务，似乎日理万机，案牍劳形，现在想来，所做之事多机械重复，华而不实，徒自我感动尔。</p><p>又想起在学校时种种“自律”和“内卷”，两相对比，只觉愈发难堪。莫见乎隐，莫显乎微，故君子慎其独。而我却全然算不上君子了。</p><p>更不忍谈这月余所学，一来如梧鼠五枝而穷，所学甚广而甚不精，不过为卖弄一句“略懂”。二如叶公独好似龙者，只求知之而不敢求好之。</p><p>腊月廿八，和朋友打玩游戏已是凌晨，解衣欲睡，却惊觉已是岁暮，复忆种种，胸中郁郁，舌不能吐，遂惺惺作此文，妄求可观往事以自戒。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;岁暮夜省&quot;&gt;&lt;a href=&quot;#岁暮夜省&quot; class=&quot;headerlink&quot; title=&quot;岁暮夜省&quot;&gt;&lt;/a&gt;岁暮夜省&lt;/h1&gt;&lt;p&gt;寒假已去其半，我不得不重审自己此前的“计划”，却只觉羞愧，自放假到如今临近年关，真正做到的不及三成。与亲友闲叙，总说自己有诸</summary>
      
    
    
    
    <category term="杂谈" scheme="https://www.crowhsu.top/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>关于spawnfailed</title>
    <link href="https://www.crowhsu.top/posts/cbadfe7e.html"/>
    <id>https://www.crowhsu.top/posts/cbadfe7e.html</id>
    <published>2023-01-16T17:57:20.000Z</published>
    <updated>2023-01-16T18:10:32.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spawn-Failed-的一些解决办法"><a href="#Spawn-Failed-的一些解决办法" class="headerlink" title="Spawn Failed 的一些解决办法"></a>Spawn Failed 的一些解决办法</h1><p>基于github的hexo博客在部署时常出现<code>Spawn failed</code>错误，这里提供一些解决方法：</p><p><strong>Case 1</strong> 首先，确认你的账号设置没有问题，在终端中使用：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br></pre></td></tr></table></figure></p><p><strong>Case 2</strong> “重启”你的git：<br>删除<code>.deploy_git</code>文件夹，然后执行<code>git config --global core.autocrlf false</code></p><p><strong>Case 3</strong> 重新配置网络代理：<br>打开<code>config.yml</code>注意是根目录的配置文件，不是主题目录下的<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: &#x27;git&#x27;</span><br><span class="line">- repo: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">+ repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></p><p><strong>Final</strong><br>删除<code>public</code>文件夹后hexo三连：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">heco g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>如果还不行就重启一下电脑试试😎</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spawn-Failed-的一些解决办法&quot;&gt;&lt;a href=&quot;#Spawn-Failed-的一些解决办法&quot; class=&quot;headerlink&quot; title=&quot;Spawn Failed 的一些解决办法&quot;&gt;&lt;/a&gt;Spawn Failed 的一些解决办法&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="help" scheme="https://www.crowhsu.top/categories/help/"/>
    
    
    <category term="hexo,github" scheme="https://www.crowhsu.top/tags/hexo-github/"/>
    
  </entry>
  
  <entry>
    <title>单调栈</title>
    <link href="https://www.crowhsu.top/posts/16518a5d.html"/>
    <id>https://www.crowhsu.top/posts/16518a5d.html</id>
    <published>2023-01-13T08:45:51.000Z</published>
    <updated>2023-01-16T17:10:44.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><p>单调栈的使用其实并不广泛，主要集中在一些特定题型：</p><p><strong>给定整数数列，输出每个数左边第一个比它小的数</strong><br><a class="btn-beautify pink block" href="https://www.acwing.com/problem/content/832/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a></p><div class="hide-block"><button type="button" class="hide-button" style="">code    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> stk[N], tt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">while</span>(tt &amp;&amp; stk[tt] &gt;= x) tt --;</span><br><span class="line">        <span class="keyword">if</span>(tt) cout &lt;&lt; stk[tt] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        stk[++ tt] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p><strong>Largest Rectangle in a Histogram</strong><br><a class="btn-beautify pink block" href="http://poj.org/problem?id=2559"   title="原题链接-POJ"><i class="far fa-hand-point-right"></i><span>原题链接-POJ</span></a></p><div class="hide-block"><button type="button" class="hide-button" style="">code    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N], l[N], r[N], q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, h + i);</span><br><span class="line">        h[<span class="number">0</span>] = h[n + <span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> tt = <span class="number">0</span>;</span><br><span class="line">        q[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(h[i] &lt;= h[q[tt]]) -- tt;</span><br><span class="line">            l[i] = q[tt];</span><br><span class="line">            q[++ tt] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        tt = <span class="number">0</span>;</span><br><span class="line">        q[<span class="number">0</span>] = n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; -- i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(h[i] &lt;= h[q[tt]]) -- tt;</span><br><span class="line">            r[i] = q[tt];</span><br><span class="line">            q[++ tt] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)&#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, <span class="built_in">ll</span>(h[i]) * (r[i] - l[i] - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单调栈&quot;&gt;&lt;a href=&quot;#单调栈&quot; class=&quot;headerlink&quot; title=&quot;单调栈&quot;&gt;&lt;/a&gt;单调栈&lt;/h1&gt;&lt;p&gt;单调栈的使用其实并不广泛，主要集中在一些特定题型：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给定整数数列，输出每个数左边第一个比它小的数&lt;/s</summary>
      
    
    
    
    <category term="算法教程" scheme="https://www.crowhsu.top/categories/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>最短路</title>
    <link href="https://www.crowhsu.top/posts/f216fabe.html"/>
    <id>https://www.crowhsu.top/posts/f216fabe.html</id>
    <published>2023-01-11T08:01:52.000Z</published>
    <updated>2023-01-13T08:45:24.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h1><h2 id="常见最短路问题与算法"><a href="#常见最短路问题与算法" class="headerlink" title="常见最短路问题与算法"></a>常见最短路问题与算法</h2><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301111623030.png" alt=""></p><h2 id="朴素Dijkstra"><a href="#朴素Dijkstra" class="headerlink" title="朴素Dijkstra"></a>朴素Dijkstra</h2><ol><li>选择起点，起点距离初始化为0，其余各点距离初始化为无穷</li><li>每次从未标记的节点中选择距离最小的节点(假设为A)，标记并收录到最优路径集合中</li><li>计算节点A的相邻节点B的距离(A到B的距离+A的距离)，若小于原有距离则更新</li><li>不断重复直到目的地被标记</li></ol><p><em>如果要记录最短路，还需要给每个节点增加一个属性(前一个点)，并在每次更新距离时更新</em></p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301111639764.gif" alt=""></p><div class="hide-block"><button type="button" class="hide-button" style="">code    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//朴素Dijkstra</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N];<span class="comment">//邻接矩阵,朴素一般都是稠密图使用</span></span><br><span class="line"><span class="type">int</span> dis[N];<span class="comment">//距离</span></span><br><span class="line"><span class="type">bool</span> vis[N];<span class="comment">//标记</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始化距离</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; !vis[n]; i ++)&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n ; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; (dis[t] &gt; dis[j] || t == <span class="number">-1</span>)) t = j;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[t] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</span><br><span class="line">            dis[j] = <span class="built_in">min</span>(dis[j], dis[t] + g[t][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[n] == inf) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dis[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="comment">//初始化邻接矩阵</span></span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">    <span class="comment">//建图</span></span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        g[a][b] = <span class="built_in">min</span>(g[a][b], c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Dijkstra</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="堆优化Dijkstra"><a href="#堆优化Dijkstra" class="headerlink" title="堆优化Dijkstra"></a>堆优化Dijkstra</h2><p>观察<code>Dijkstra</code>朴素算法的时间复杂度<br>可以发现其中<code>在未标记的点中寻找距离最小的点</code>步骤的时间复杂度是<code>O(n * n)</code>的，也是最慢的，所以优化也是针对这一步进行的，即使用<code>堆</code></p><p>可以手写一个<code>堆</code>，可以保证堆中永远只有n个数<br>也可以用<code>priority_queue</code>，但是不支持更改元素，所以实际上会有冗余</p><div class="hide-block"><button type="button" class="hide-button" style="">code    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">150010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 稀疏图用邻接表来存</span></span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"><span class="type">int</span> w[N]; <span class="comment">// 用来存权重</span></span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N]; <span class="comment">//标记</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    w[idx] = c, e[idx] = y, ne[idx] = h[x], h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    <span class="comment">// 首先小根堆是根据距离来排的，所以第一个变量要是距离，</span></span><br><span class="line">    <span class="comment">// 其次在从堆中拿出来的时候要知道知道这个点是哪个点，所以第二个变量要存点。</span></span><br><span class="line">    heap.<span class="built_in">push</span>(&#123; <span class="number">0</span>, <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>())&#123;</span><br><span class="line">        PII k = heap.<span class="built_in">top</span>(); <span class="comment">// 取不在集合S中距离最短的点</span></span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> ver = k.second, distance = k.first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(st[ver]) <span class="keyword">continue</span>;</span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; distance + w[i])&#123;</span><br><span class="line">                dist[j] = distance + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123; dist[j], j &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--)&#123;</span><br><span class="line">        <span class="type">int</span> x, y, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;c);</span><br><span class="line">        <span class="built_in">add</span>(x, y, c);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dijkstra</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a>Bellman-Ford</h2><p><strong>算法流程：</strong><br>循环n次(后面会解释)<br>每次循环遍历所有的边✨<br>以 <code>a-(w)-&gt;b</code> 为例<br>更新 <code>dis[b] = min(dis[b], dis[a] + w)</code></p><p>为什么要循环n次，因为贝尔曼算法每次遍历所有边所求的的其实是经过<code>i</code>条边的最短路径，而n个点的图中，任意两点之间的最短路最多有<code>n-1</code>条边,<strong>如果第n次仍有更新，则必然存在负环</strong></p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301121204382.gif" alt=""></p><p>✨：之所以标星，是因为这一点很重要，很多人初学(比如我)贝尔曼算法的时候都会按照以往的习惯选择邻接表等方法建图，但实际上，贝尔曼算法只要求<strong>遍历所有的边</strong>，所以在空间允许的情况下可以直接使用最简单的数据结构：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line">&#125;edges[m];</span><br></pre></td></tr></table></figure></p><p><strong>一般情况下，SPFA都是优于Bellman的(各种意义上)，除了一些特殊的题目：</strong></p><a class="btn-beautify pink block" href="https://www.acwing.com/activity/content/problem/content/922/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><p><strong>有边数限制的最短路</strong><br>给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环， 边权可能为负数。</p><p>请你求出从 1 号点到 n 号点的最多经过 k 条边的最短距离，如果无法从 1 号点走到 n 号点，输出 <code>impossible</code>。</p><p>注意：图中可能 存在负权回路 。</p><p><strong>输入格式</strong><br>第一行包含三个整数 n,m,k。</p><p>接下来 m 行，每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。</p><p>点的编号为 1∼n。</p><p><strong>输出格式</strong><br>输出一个整数，表示从 1 号点到 n 号点的最多经过 k 条边的最短距离。</p><p>如果不存在满足条件的路径，则输出 <code>impossible</code>。</p><p><strong>数据范围</strong><br><code>1≤n</code>,<code>k≤500</code>,<br><code>1≤m≤10000</code>,<br><code>1≤x</code>,<code>y≤n</code>,<br>任意边长的绝对值不超过 <code>10000</code>。</p><p><strong>样例</strong><br>输入：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3 1</span><br><span class="line">1 2 1</span><br><span class="line">2 3 1</span><br><span class="line">1 3 3</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></p><div class="hide-block"><button type="button" class="hide-button" style="">code    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>, M = <span class="number">1e4</span> + <span class="number">10</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> dis[N], backup[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Bellman_ford</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k ; i ++)&#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(backup, dis, <span class="keyword">sizeof</span> dis);</span><br><span class="line">        <span class="comment">//备份是为了保证我们每次进行松弛操作时使用的都是上一次的结果</span></span><br><span class="line">        <span class="comment">//因为在遍历过程中，先被遍历的节点的 dis 已经发生变化了</span></span><br><span class="line">        <span class="comment">//用变化后的值再更新其余的点会导致边数不符合要求</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m ; j ++)&#123;</span><br><span class="line">            <span class="type">int</span> a = edges[j].a, b = edges[j].b, w = edges[j].w;</span><br><span class="line">            dis[b] = <span class="built_in">min</span>(dis[b], backup[a] + w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[n] &gt; inf / <span class="number">2</span>) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">return</span> dis[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a, b, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">        edges[i] = &#123;a, b, w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">Bellman_ford</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ans == inf) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h2><p>SPFA就是对Bellman的优化，而这种优化正是SPFA无法实现<strong>有边数限制的最短路</strong>的原因</p><p>观察Bellman算法，我们发现，如果a的距离没有被更新过，那么a的所有出边指向的节点也不可能被a所更新，所以实际上我们并不需要真的每次都<strong>遍历所有的边</strong>，我们只需要遍历<strong>被更新过的节点的所有出边</strong>即可<br><a class="btn-beautify pink block" href="https://www.acwing.com/problem/content/853/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a></p><div class="hide-block"><button type="button" class="hide-button" style="">code    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i])&#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="keyword">if</span> (!st[j])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- )&#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">spfa</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0x3f3f3f3f</span>) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总有人说SPFA它死了，我只想说……<br>好像是死了，但没死透……🤔</p></div></div><p><strong>SPFA求负环</strong><br>只需要新增<code>cnt[N]</code>数组用来记录边数即可，每次更新<code>cnt[b] = cnt[a] + 1</code><br>那和前文说的一样，根据抽屉定理，只要<code>cnt[x] &gt;= n</code>说明存在负环<br><a class="btn-beautify pink block" href="https://www.acwing.com/problem/content/854/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a></p><p><strong>题目描述</strong><br>给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环， 边权可能为负数。</p><p>请你判断图中是否存在负权回路。<br><strong>输入格式</strong><br>第一行包含整数 n 和 m。</p><p>接下来 m 行每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。</p><p><strong>输出格式</strong></p><p>如果图中存在负权回路，则输出 Yes，否则输出 No。</p><p><strong>数据范围</strong><br><code>1≤n≤2000</code>,<br><code>1≤m≤10000</code>,<br>图中涉及边长绝对值均不超过 <code>10000</code>。</p><div class="hide-block"><button type="button" class="hide-button" style="">code    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>, M = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], w[M], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> dist[N], cnt[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )&#123;</span><br><span class="line">        st[i] = <span class="literal">true</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i])&#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                cnt[j] = cnt[t] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (cnt[j] &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (!st[j])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- )&#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">spfa</span>()) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h2><p>使用邻接矩阵来存储任意两个节点之间的最短路<br>思路……直接看代码就懂了，肥肠暴力</p><div class="hide-block"><button type="button" class="hide-button" style="">code    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, Q;</span><br><span class="line"><span class="type">int</span> d[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;Q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (i == j) d[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- )&#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        d[a][b] = <span class="built_in">min</span>(d[a][b], c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">floyd</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (Q -- )&#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> t = d[a][b];</span><br><span class="line">        <span class="keyword">if</span> (t &gt; INF / <span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p><strong>本文中部分代码来自：AcWing，作者：yxc</strong><br><a href="https://www.acwing.com">AcWing</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最短路&quot;&gt;&lt;a href=&quot;#最短路&quot; class=&quot;headerlink&quot; title=&quot;最短路&quot;&gt;&lt;/a&gt;最短路&lt;/h1&gt;&lt;h2 id=&quot;常见最短路问题与算法&quot;&gt;&lt;a href=&quot;#常见最短路问题与算法&quot; class=&quot;headerlink&quot; title=&quot;常</summary>
      
    
    
    
    <category term="算法教程" scheme="https://www.crowhsu.top/categories/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>拓扑序列</title>
    <link href="https://www.crowhsu.top/posts/751ac048.html"/>
    <id>https://www.crowhsu.top/posts/751ac048.html</id>
    <published>2023-01-10T07:21:13.000Z</published>
    <updated>2023-01-12T05:24:08.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拓扑序列"><a href="#拓扑序列" class="headerlink" title="拓扑序列"></a>拓扑序列</h1><p>对于一个<strong>有向图</strong>，如果其顶点的一个序列<code>A</code>满足：<code>对于图中的每条有向边&lt;x,y&gt;，x都出现在y之前</code>。则称<code>A</code>为<code>G</code>的一个拓扑序列，<strong>拓扑序列不唯一</strong>，<strong>有向无环图一定有拓扑序列</strong>，所以有向无环图也被称为拓扑图。</p><h2 id="如何求拓扑序列？"><a href="#如何求拓扑序列？" class="headerlink" title="如何求拓扑序列？"></a>如何求拓扑序列？</h2><p>首先观察到所有<code>入度为0的点都可以作为起点(起点必然是入度为0的点)</code><br>那如果我们把这些点删掉呢？会有新的起点，而<code>起点必然是入度为0的点</code>，所以显然，我们只需要不断地<code>找起点</code>然后<code>删起点</code>就可以了</p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301101712034.gif" alt=""></p><h3 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h3><p>给定一个 n 个点 m 条边的有向图，点的编号是 1 到 n，图中可能存在重边和自环。<br>请输出一个任意的拓扑序列，若不存在请输出-1.<br><strong>输入格式</strong><br>第一行两个整数 n 和 m<br>接下来的 m 行，每行两个是整数 x 和 y，表示存在一条从 x 指向 y 的边<br><strong>输出格式</strong><br>共一行，如果存在拓扑序列，则输出任意合法的拓扑序列即可，否则输出 -1</p><div class="hide-block"><button type="button" class="hide-button" style="">code    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> e[N], ne[N], idx;<span class="comment">//邻接表存储图</span></span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">-1</span>;<span class="comment">//队列保存入度为0的点，也就是能够输出的点，</span></span><br><span class="line"><span class="type">int</span> n, m;<span class="comment">//保存图的点数和边数</span></span><br><span class="line"><span class="type">int</span> d[N];<span class="comment">////保存各个点的入度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;<span class="comment">//遍历一遍顶点的入度。</span></span><br><span class="line">        <span class="keyword">if</span>(d[i] == <span class="number">0</span>)<span class="comment">//如果入度为 0, 则可以入队列</span></span><br><span class="line">            q[++tt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(tt &gt;= hh)&#123;<span class="comment">//循环处理队列中点的</span></span><br><span class="line">        <span class="type">int</span> a = q[hh++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[a]; i != <span class="number">-1</span>; i = ne[i])&#123;<span class="comment">//循环删除 a 发出的边</span></span><br><span class="line">            <span class="type">int</span> b = e[i];<span class="comment">//a 有一条边指向b</span></span><br><span class="line">            d[b]--;<span class="comment">//删除边后，b的入度减1</span></span><br><span class="line">            <span class="keyword">if</span>(d[b] == <span class="number">0</span>)<span class="comment">//如果b的入度减为 0,则 b 可以输出，入队列</span></span><br><span class="line">                q[++tt] = b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tt == n - <span class="number">1</span>)&#123;<span class="comment">//如果队列中的点的个数与图中点的个数相同，则可以进行拓扑排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;<span class="comment">//队列中保存了所有入度为0的点，依次输出</span></span><br><span class="line">            cout &lt;&lt; q[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//如果队列中的点的个数与图中点的个数不相同，则可以进行拓扑排序</span></span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span>;<span class="comment">//输出-1，代表错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;<span class="comment">//保存点的个数和边的个数</span></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);<span class="comment">//初始化邻接矩阵</span></span><br><span class="line">    <span class="keyword">while</span> (m -- )&#123;<span class="comment">//依次读入边</span></span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        d[b]++;<span class="comment">//顶点b的入度+1</span></span><br><span class="line">        <span class="built_in">add</span>(a, b);<span class="comment">//添加到邻接矩阵</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">topsort</span>();<span class="comment">//进行拓扑排序</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是数组模拟的队列，所以实际上数据还在，可以直接输出，如果用了stl就要另开一个队列保存答案</p></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;拓扑序列&quot;&gt;&lt;a href=&quot;#拓扑序列&quot; class=&quot;headerlink&quot; title=&quot;拓扑序列&quot;&gt;&lt;/a&gt;拓扑序列&lt;/h1&gt;&lt;p&gt;对于一个&lt;strong&gt;有向图&lt;/strong&gt;，如果其顶点的一个序列&lt;code&gt;A&lt;/code&gt;满足：&lt;code&gt;对于图中</summary>
      
    
    
    
    <category term="算法教程" scheme="https://www.crowhsu.top/categories/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>图和搜索</title>
    <link href="https://www.crowhsu.top/posts/6109666d.html"/>
    <id>https://www.crowhsu.top/posts/6109666d.html</id>
    <published>2023-01-10T03:40:01.000Z</published>
    <updated>2023-01-10T10:08:26.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图和搜索"><a href="#图和搜索" class="headerlink" title="图和搜索"></a>图和搜索</h1><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><blockquote><p>在线性表中，数据元素之间是被串起来的，仅有线性关系，每个数据元素只有一个直接前驱和一个直接后继。在树形结构中，数据元素之间有着明显的层次关系，并且每一层上的数据元素可能和下一层中多个元素相关，但只能和上一层中一个元素相关。图是一种较线性表和树更加复杂的数据结构。在图形结构中，结点之间的关系可以是任意的，图中任意两个数据元素之间都可能相关。</p></blockquote><p>图<code>(Graph)</code>是由顶点的有穷非空集合<code>V(G)</code>和顶点之间边的集合<code>E(G)</code>组成，通常表示为:<code>G=(V,E)</code>，其中，<code>G</code>表示一个图，<code>V</code>是图<code>G</code>中顶点的集合，<code>E</code>是图<code>G</code>中边的集合。</p><blockquote><p>注意:线性表可以是空表，树可以是空树，但图不可以是空图。就是说，图中不能一个顶点也没有，图的顶点集V一定非空，但边集E可以为空，此时图中只有顶点而没有边。</p></blockquote><h3 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h3><p>若<code>E</code>为有向边(或弧)的集合，则称<code>G</code>为有向图。有向边可以用顶点的<strong>有序对</strong>表示：<code>&lt;v, w&gt;</code> 表示从顶点<code>v</code>指向顶点<code>w</code>的有向边。</p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301101334865.png" alt=""></p><p>如上图可表示为：<br>$G=(V,E)$<br>$V={a,b,c}$<br>$E={<a,b>,<b,a>,<b,c>}$</p><h3 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h3><p>可以理解为所有边都是双向的有向图，边表示为顶点的无序对</p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301101339876.png" alt=""></p><p>上图可表示为：<br>$G=(V,E)$<br>$V={a,b,c}$<br>$E={(a,b),(b,c)}$</p><h3 id="简单图"><a href="#简单图" class="headerlink" title="简单图"></a>简单图</h3><p>没有重边，没有自环的图</p><h3 id="完全图"><a href="#完全图" class="headerlink" title="完全图"></a>完全图</h3><p>任意两个顶点可以相互指向的图</p><h3 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h3><p>顶点集为子集，边集为子集的图称为子图<br>(得先满足是一个图，才能称为子图)</p><h3 id="连通图"><a href="#连通图" class="headerlink" title="连通图"></a>连通图</h3><p>在<strong>无向图</strong>中如果两个顶点之间有路径，则称这两个顶点是<strong>连通的</strong><br>如果任意两个顶点都是连通的，则称该图为<strong>连通图</strong><br>极大连通子图被称为<strong>连通分量</strong>。</p><blockquote><p>将连通改为强连通，将有路径存在改为有双向路径存在，就是有向图中的强连通、强连通图、强连通分量概念</p></blockquote><h3 id="度"><a href="#度" class="headerlink" title="度"></a>度</h3><p>对于每个顶点，我们都可以用以该顶点为端点的边数作为一项衡量，这项衡量就是该顶点的<strong>度</strong><br>对于无向图，定点的度就是以该顶点为端点的边的条数<br>对于有向图，顶点的度分为<strong>出度</strong>和<strong>入度</strong>，入度是指向该顶点的有向边的条数，出度是从该顶点指出的有向边的条数。</p><h3 id="网-带权图"><a href="#网-带权图" class="headerlink" title="网/带权图"></a>网/带权图</h3><p>如果一个图中，每条边都可以被某项数值衡量，则该数值被称为该边的<strong>权</strong>，则这种图被称为<strong>带权图</strong>，也被称为<strong>网</strong></p><h3 id="稠密-稀疏图"><a href="#稠密-稀疏图" class="headerlink" title="稠密/稀疏图"></a>稠密/稀疏图</h3><p>边数很少的图被称为稀疏图，反之则为稠密图（我还没找到这个很多/很少的具体分界，有很多不同的划分方法，一般认为 $E&lt;V*\log_2{V}$ 的图为稀疏图）</p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>从顶点a到顶点b之间的路径指的是顶点序列：<code>a,v1,v2,v3,...,vn,b</code>(该序列中任意两相邻顶点间有边相连)。<br>路径上边的权值之和称为<strong>路径的长度</strong><br><code>a</code>与<code>b</code>相同的路径称为<strong>环</strong></p><h3 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h3><p>即从顶点<code>a</code>到<code>b</code>的最短路径长度，若不存在路径则认为距离是无限</p><h3 id="有向树"><a href="#有向树" class="headerlink" title="有向树"></a>有向树</h3><p>一个顶点的入度为0，其余顶点的入度为1的有向图</p><h3 id="无向树"><a href="#无向树" class="headerlink" title="无向树"></a>无向树</h3><p>连通且无环的无向图</p><h2 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>用一个二维矩阵<code>edge[maxv][maxv]</code>表示图：</p><script type="math/tex; mode=display">\begin{array}{c}egde[i][j]=\left\{\begin{matrix}true\,\,,\,\,<v_i,v_j>\,\,or\,\,(v_i,v_j)\,\,\in\,\,E(G)\\false\,\,,<v_i,v_j>\,\,or\,\,(v_i,v_j)\,\,\notin\,\,E(G) \end{matrix}\right.\end{array}</script><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301101422439.png" alt=""></p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301101424926.png" alt=""></p><p>对于带权图：</p><script type="math/tex; mode=display">\begin{array}{c}egde[i][j]=\left\{\begin{matrix}w_{ij},&<v_i,v_j>\,\,or\,\,(v_i,v_j)\,\,\in\,\,E(G)\\ \infty  ,&<v_i,v_j>\,\,or\,\,(v_i,v_j)\,\,\notin\,\,E(G) \\ 0, & i = j\end{matrix}\right.\end{array}</script><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301101431883.png" alt=""></p><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>对于一个稀疏图来说，邻接矩阵未免有些浪费了，这就引出了下面的方法：<strong>邻接表</strong></p><p>对<code>G</code>中的每一个顶点<code>v</code>建立一个单链表，第<code>i</code>个节点表示以<code>v</code>为顶点的第<code>i</code>条边(或从<code>v</code>指出的第<code>i</code>条边)<br>这里给出<strong>数组模拟</strong>的邻接表的建立：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = N * <span class="number">2</span>;</span><br><span class="line"><span class="comment">//N是最大顶点数,M是最大边数</span></span><br><span class="line"><span class="type">int</span> head[N], node[M], nextNode[M], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    node[idx] = b, nextNode[idx] = head[a], head[a] = idx ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h3><p>对于普通的邻接表，如果我们存储的是一个有向图，那我们就只能选取<code>出度</code>和<code>入度</code>中的一个，想了解另一个就必须要遍历整张表，或者同时建立一个邻接表和一个逆邻接表，所以我们又有了新的数据结构：<strong>十字链表</strong><br>其实就是把邻接表和逆邻接表结合了一下，将其中重复的部分重合起来减少空间开销</p><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="深度优先遍历-dfs"><a href="#深度优先遍历-dfs" class="headerlink" title="深度优先遍历 - dfs"></a>深度优先遍历 - dfs</h3><p>深度优先遍历，顾名思义，从选定的顶点开始，沿着能走的边一直走到无路可走为止，然后回溯，直到所有顶点都被遍历结束。时间复杂度<code>O(V+E)</code></p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301101507487.gif" alt=""></p><div class="hide-block"><button type="button" class="hide-button" style="">code    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = N * <span class="number">2</span>, _end = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[N], node[M], nextNode[M], idx;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="comment">//这里要记得初始化 nextNode 全为 -1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[u]; i != _end; i = nextNode[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = node[i];</span><br><span class="line">        <span class="keyword">if</span>(!vis[j]) <span class="built_in">dfs</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="宽度优先遍历-bfs"><a href="#宽度优先遍历-bfs" class="headerlink" title="宽度优先遍历 - bfs"></a>宽度优先遍历 - bfs</h3><p>宽度优先搜索则是一层一层搜索，先从选定顶点开始，遍历其全部相邻顶点，并将其放入队列，再从队列中依次取出顶点，做宽度优先搜索。</p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301101508684.gif" alt=""></p><div class="hide-block"><button type="button" class="hide-button" style="">code    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> head[N], node[M], nextNode[M], idx;</span><br><span class="line"><span class="type">int</span> dis[N], q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> hhead = <span class="number">0</span>, ttail = <span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dis, _end, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(hhead &lt;= ttail)&#123;</span><br><span class="line">        <span class="type">int</span> tmp = q[hhead ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[tmp]; i != _end; i = nextNode[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = node[i];</span><br><span class="line">            <span class="keyword">if</span>(dis[j] == <span class="number">-1</span>)&#123;</span><br><span class="line">                dis[j] = d[tmp] + <span class="number">1</span>;</span><br><span class="line">                q[++ ttail] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是用的是数组模拟队列</p></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图和搜索&quot;&gt;&lt;a href=&quot;#图和搜索&quot; class=&quot;headerlink&quot; title=&quot;图和搜索&quot;&gt;&lt;/a&gt;图和搜索&lt;/h1&gt;&lt;h2 id=&quot;图&quot;&gt;&lt;a href=&quot;#图&quot; class=&quot;headerlink&quot; title=&quot;图&quot;&gt;&lt;/a&gt;图&lt;/h2&gt;&lt;b</summary>
      
    
    
    
    <category term="算法教程" scheme="https://www.crowhsu.top/categories/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>stl之pbds</title>
    <link href="https://www.crowhsu.top/posts/3012010d.html"/>
    <id>https://www.crowhsu.top/posts/3012010d.html</id>
    <published>2023-01-06T03:36:45.000Z</published>
    <updated>2023-01-06T08:33:06.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="STLのpbds"><a href="#STLのpbds" class="headerlink" title="STLのpbds"></a>STLのpbds</h1><p><code>pbds</code>是一个<strong>强大的</strong>库，封装了<code>hash, tree, trie, priority_queue</code>四种数据结构</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br></pre></td></tr></table></figure><p>但是在<code>dev c++</code>中会有文件缺失，得写成<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/trie_policy.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br></pre></td></tr></table></figure><br>编译器选择<code>g++</code>，<code>chang++</code>会报错</p><h2 id="hash-table"><a href="#hash-table" class="headerlink" title="hash_table"></a>hash_table</h2><p>探测法和拉链法都有提供：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cc_hash_table&lt;key,value&gt; h;<span class="comment">//拉链法</span></span><br><span class="line">gp_hash_table&lt;key,value&gt; h;<span class="comment">//探测法</span></span><br></pre></td></tr></table></figure><br>只用到映射的时候使用，不支持排序（遍历时的顺序既不是插入时的顺序也不是排序后的顺序）<br>支持<code>[]</code>和<code>find</code><br>（其实不如<code>unordered_map</code>快）</p><h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><p>是平衡树:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tree&lt;<span class="type">int</span>,null_type,less&lt;pii&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; tr;</span><br><span class="line"><span class="type">int</span> <span class="comment">//key 的类型</span></span><br><span class="line">null_type <span class="comment">//无映射(低版本g++为null_mapped_type)</span></span><br><span class="line"><span class="comment">//简单理解就是使用 set 而不是 map</span></span><br><span class="line">less&lt;pii&gt; <span class="comment">//从小到大排序</span></span><br><span class="line">rb_tree_tag <span class="comment">//红黑树</span></span><br><span class="line">splay_tree_tag <span class="comment">//伸展树</span></span><br><span class="line">ov_tree_tag <span class="comment">//不知道啥树</span></span><br><span class="line">tree_order_statistics_node_update <span class="comment">//更新方式 </span></span><br><span class="line"></span><br><span class="line">tr.<span class="built_in">insert</span>(x); <span class="comment">//插入x</span></span><br><span class="line">tr.<span class="built_in">erase</span>(x); <span class="comment">//删除x</span></span><br><span class="line">tr.<span class="built_in">order_of_key</span>(); <span class="comment">//求排名 </span></span><br><span class="line">tr.<span class="built_in">find_by_order</span>(x); <span class="comment">//找k小值，返回迭代器，没有返回 end()</span></span><br><span class="line">tr.<span class="built_in">order_of_key</span>(x); <span class="comment">//找x的排名，返回整数，x不需要在tr中，求解严格小于x的元素的个数</span></span><br><span class="line">tr.<span class="built_in">join</span>(b); <span class="comment">//将b并入tr，前提是两棵树类型一样且没有重复元素 </span></span><br><span class="line">tr.<span class="built_in">split</span>(v,b); <span class="comment">//分裂，key小于等于v的元素属于tr，其余的属于b</span></span><br><span class="line">tr.<span class="built_in">lower_bound</span>(x); <span class="comment">//返回第一个大于等于x的元素的迭代器</span></span><br><span class="line">tr.<span class="built_in">upper_bound</span>(x); <span class="comment">//返回第一个大于x的元素的迭代器</span></span><br></pre></td></tr></table></figure><br><strong>以上所有操作的时间复杂度均为O(logn)</strong></p><h2 id="trie"><a href="#trie" class="headerlink" title="trie"></a>trie</h2><p>字典树：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> tr = trie&lt;string,null_type,trie_string_access_traits&lt;&gt;,pat_trie_tag,trie_prefix_search_node_update&gt;;</span><br><span class="line"><span class="comment">//第一个参数必须为字符串类型，tag也有别的tag，但pat最快</span></span><br><span class="line">tr.<span class="built_in">insert</span>(s); <span class="comment">//插入s </span></span><br><span class="line">tr.<span class="built_in">erase</span>(s); <span class="comment">//删除s </span></span><br><span class="line">tr.<span class="built_in">join</span>(b); <span class="comment">//将b并入tr </span></span><br><span class="line">pair<span class="comment">//pair的使用如下：</span></span><br><span class="line">pair&lt;tr::iterator,tr::iterator&gt; range = base.<span class="built_in">prefix_range</span>(x);</span><br><span class="line"><span class="keyword">for</span>(tr::iterator it= range.first; it != range.second; it ++)</span><br><span class="line">    cout&lt;&lt;*it&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;endl;</span><br><span class="line"><span class="comment">//pair中第一个是起始迭代器，第二个是终止迭代器，遍历过去就可以找到所有字符串了。 </span></span><br></pre></td></tr></table></figure></p><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><p>优先队列：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__gnu_pbds::priority_queue&lt;<span class="type">int</span>,greater&lt;<span class="type">int</span>&gt;,pairing_help_tag&gt; Q;</span><br><span class="line"><span class="comment">//防止和 std 冲突</span></span><br><span class="line"><span class="comment">//三个参数分别是 元素类型 仿函数类 堆的类型</span></span><br><span class="line">Q.<span class="built_in">push</span>(x);<span class="comment">//有返回值，返回迭代器</span></span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">Q.<span class="built_in">top</span>();</span><br><span class="line">Q.<span class="built_in">join</span>(b);<span class="comment">// b 被清空</span></span><br><span class="line">Q.<span class="built_in">empty</span>();</span><br><span class="line">Q.<span class="built_in">size</span>(); </span><br><span class="line">Q.<span class="built_in">modify</span>(it,<span class="number">6</span>);</span><br><span class="line">Q.<span class="built_in">erase</span>(it);</span><br><span class="line"><span class="comment">//迭代器声明</span></span><br><span class="line">__gnu_pbds::priority_queue::point_iterator it;  </span><br></pre></td></tr></table></figure><br>堆的类型有：</p><ul><li><code>pairing_heap_tag</code>：配对堆 ✨</li><li><code>thin_heap_tag</code>：斐波那契堆 ✨</li><li><code>binomial_heap_tag</code>：二项堆</li><li><code>binary_heap_tag</code>：二叉堆</li></ul><p>其中仿函数类可以手写(按b降序)：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(node x, node y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x.b &lt; y.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反着写就好了</span></span><br></pre></td></tr></table></figure><br>和<code>std::priority_queue</code>对比<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__gnu_pbds::priority_queue&lt;<span class="type">int</span>, greater&lt;<span class="type">int</span>&gt;, pairing_heap_tag&gt; q;</span><br><span class="line">std::priority&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>🌐 <a href="https://blog.csdn.net/Gh0st_Lx/article/details/122851588">pbds库学习笔记(优先队列、平衡树、哈希表)</a><br>🌐 <a href="https://www.luogu.com.cn/blog/Chanis/gnu-pbds">比STL还STL？——平板电视</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;STLのpbds&quot;&gt;&lt;a href=&quot;#STLのpbds&quot; class=&quot;headerlink&quot; title=&quot;STLのpbds&quot;&gt;&lt;/a&gt;STLのpbds&lt;/h1&gt;&lt;p&gt;&lt;code&gt;pbds&lt;/code&gt;是一个&lt;strong&gt;强大的&lt;/strong&gt;库，封装了&lt;</summary>
      
    
    
    
    <category term="算法教程" scheme="https://www.crowhsu.top/categories/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>VScode搭建cpp环境</title>
    <link href="https://www.crowhsu.top/posts/30226dd9.html"/>
    <id>https://www.crowhsu.top/posts/30226dd9.html</id>
    <published>2023-01-06T03:21:04.000Z</published>
    <updated>2023-01-06T08:34:48.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在VScode中搭建cpp环境"><a href="#在VScode中搭建cpp环境" class="headerlink" title="在VScode中搭建cpp环境"></a>在VScode中搭建cpp环境</h1><h2 id="下载安装编译器"><a href="#下载安装编译器" class="headerlink" title="下载安装编译器"></a>下载安装编译器</h2><p><a href="https://nuwen.net/mingw.html">MinGW下载地址</a><br>点击上方下载地址，点击<code>mingw-18.0-without-git.exe</code>进行下载</p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061525353.png" alt=""></p><p>双击下载好的<code>.exe</code>文件选择安装路径，<strong>记住你选择的路径</strong><br>安装结束后打开<strong>安装路径</strong>，选择进入<code>bin</code>目录，复制路径(比如我这里就是<code>E:\MinGW\bin</code>)</p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061529526.png" alt=""></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>打开 <code>设置 -&gt; 系统信息 -&gt; 高级系统设置</code></p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061532104.png" alt=""></p><p>选择<code>环境变量</code></p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061532702.png" alt=""></p><p>找到<code>Path</code>(选择用户变量还是系统变量取决于你需要为所有用户配置还是只为你自己配置)</p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061534899.png" alt=""></p><p>点击对应的<code>编辑</code>，进入后点击<code>新建</code>，粘贴你刚刚复制的地址</p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061535317.png" alt=""></p><p>然后一直点确定退出</p><p>使用 <code>win</code> + <code>R</code>，输入 <code>cmd</code>，回车<br>在弹出的 <code>cmd</code> 窗口中输入 <code>g++ --version</code> 和 <code>gcc -v</code> 如果能显示版本号，说明安装成功</p><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061538349.png" alt=""></p><h2 id="配置运行环境"><a href="#配置运行环境" class="headerlink" title="配置运行环境"></a>配置运行环境</h2><p>打开拓展(<code>ctrl</code> + <code>shift</code> + <code>X</code>)<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog20221230084551.png" alt=""></p><p>在搜索栏中输入“c” （你不需要输入双引号），然后安装第一个即可<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061522014.png" alt=""></p><p>安装<code>Code Runner</code>插件，这能让你的“码”跑起来<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061543519.png" alt=""></p><p>这个时候会提示你“重新加载”，也就是重启一下<code>VScode</code></p><p>完成之后，找到<code>Code Runner</code>，点击旁边的 齿轮图标进入<code>扩展设置</code><br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061555758.png" alt=""><br>找到<code>Run In Terminal</code>，勾选</p><p>完成之后，在<code>扩展-已安装</code>中找到<code>C/C ++</code>，点击旁边的 齿轮图标进入<code>扩展设置</code><br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061556707.png" alt=""></p><p>找到<code>Compile Path</code>也可以直接搜索<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061557060.png" alt=""><br>里面粘贴刚刚复制的路径加<code>\g++.exe</code></p><p>找到<code>Include Path</code>，选择<code>添加项</code>，粘贴刚刚复制的路径并将<code>bin</code>改为<code>lib</code><br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061602204.png" alt=""></p><p>找到<code>Intelli Sense Mode</code> 并选择<code>gcc X64</code><br>(IntelliSense可以实现当光标悬停在函数上时显示类定义和注释，当您在 IDE 中键入函数名时，IntelliSense 还可以完成这些名称。)</p><p>找到<code>Cpp Standard</code>和<code>C Standard</code>，并选择你想要使用的编译器版本</p><p>现在，您可以直接在编辑窗口右键选择<code>Run Code</code>，或使用<code>Ctrl</code> + <code>Alt</code> + <code>N</code>运行代码</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>使用<code>ctrl</code> + <code>shift</code> + <code>D</code>，点击<code>运行和调试</code>（或者直接按下<code>F5</code>）<br>选择<code>C++(GDB/LLDB)</code>-<code>C/C++:g++.exe</code><br>等待片刻，看到调试页面代表配置成功</p><p>PS:如果想要在<code>外部调试台</code>进行调试，请先更换更低版本的<code>C/C++</code>插件(1.8.4即可)<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061621694.png" alt=""><br>然后重新执行上述操作，此后会生成一个<code>launch.json</code>文件，进入文件，将<code>externalconsole</code>的值改为<code>true</code>即可</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>在大量做题时，我们往往要新建大量的文件，并且每个文件的开头都几乎差不多，这个时候就可以使用<code>用户代码</code>功能</p><p>来到<code>文件-首选项-用户代码片段</code>，选择<code>cpp.json</code></p><p>开头注释部分无关紧要，我们主要关注<code>&quot;Print to console&quot;</code>的内容：<br><code>prefix</code>-“快捷输入”，在新建的空白<code>cpp</code>文件中输入对应内容并回车，则会自动帮你补全模板内容<br><code>body</code>-模板主要内容，见下方例子：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;#include &lt;iostream&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;using namespace std;&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">//空行</span></span><br><span class="line">   <span class="string">&quot;int main()&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;    $0&quot;</span><span class="punctuation">,</span> <span class="comment">//光标会在这里等待输入</span></span><br><span class="line">   <span class="string">&quot;     return 0;&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在VScode中搭建cpp环境&quot;&gt;&lt;a href=&quot;#在VScode中搭建cpp环境&quot; class=&quot;headerlink&quot; title=&quot;在VScode中搭建cpp环境&quot;&gt;&lt;/a&gt;在VScode中搭建cpp环境&lt;/h1&gt;&lt;h2 id=&quot;下载安装编译器&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="语法教程" scheme="https://www.crowhsu.top/categories/%E8%AF%AD%E6%B3%95%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>快速幂</title>
    <link href="https://www.crowhsu.top/posts/20c47d09.html"/>
    <id>https://www.crowhsu.top/posts/20c47d09.html</id>
    <published>2023-01-05T09:46:59.000Z</published>
    <updated>2023-01-05T11:40:21.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速幂的原理和实现"><a href="#快速幂的原理和实现" class="headerlink" title="快速幂的原理和实现"></a>快速幂的原理和实现</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>小明最新迷上了信息竞赛……<br>好吧，不扯淡了，在我们初学编程时一定都做过这样的题目：<br><strong>计算a的k次方</strong><br>当时我们是怎样做的呢？很简单，只要循环<code>k</code>次就可以了，但是这样的做法时间复杂度是<code>O(k)</code>的<del>(这个OK真的很好笑)</del><br>如果要算$\,\,a^{10^{10}}\,\,\,\,\,\,$难道要循环1e10次吗？我们还能不能更快呢？</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p> 先考虑一种特殊情况，即 $k = 2^m,(m\in Z^+)$ 的情况，比如 $\,a^{64}\,\,$ ？很明显我们可以先算出$\,a^2\,$，然后算出$\,\,a^4\,\,$，……，最后得到$\,\,a^{64}\,\,$:</p><script type="math/tex; mode=display">\begin{split}&a \times a = a^2\\&a^2 \times a^2 = a^4\\&a^4 \times a^4 = a^8\\&a^8 \times a^8 = a^{16}\\&a^{16} \times a^{16} = a^{32}\\&a^{32} \times a^{32} = a^{64}\\\end{split}</script><p>这样的话我们只要做<strong>6次</strong>乘法，时间复杂度为 <code>O(log k)</code></p><p>扩展这种方法，假设我们需要算 $\,\,a^{233}\,\,$ ,我们不难发现 $a^{233} = a^{1}\times a^{8}\times a^{32} \times a^{64} \times a ^{128}$，也即我们只需要算<strong>0 + 3 + 5 + 6 + 7 + 4 = 25次</strong>，相比于朴素算法的<strong>233次</strong>明显减少</p><p>那我们如何将形如 $a^k$ 的形式转化为多个指数为2的幂相乘的形式呢？<br>观察指数的二进制形式，以<code>233</code>为例<br>$(233)_{10} = (11101001)_2$<br>也即 $233 = 2^8 + 2^7 + 2^6 + 2^5 + 2^3 + 2^0$<br>而这显然可以通过<strong>位运算</strong>简单的实现</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fast_pow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            ans *= a;</span><br><span class="line">        &#125;</span><br><span class="line">        a *= a;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过表格理解程序的运算过程：</p><div class="table-container"><table><thead><tr><th>循环次数</th><th><code>b</code></th><th><code>a</code></th><th><code>ans &amp; 1</code></th><th><code>ans</code></th></tr></thead><tbody><tr><td>1</td><td><code>11101001</code></td><td>$\,\,a^1\,\,$</td><td><code>true</code></td><td>$\,\,a^1\,\,$</td></tr><tr><td>2</td><td><code>1110100</code></td><td>$\,\,a^2\,\,$</td><td><code>false</code></td><td>$\,\,a^1\,\,$</td></tr><tr><td>3</td><td><code>111010</code></td><td>$\,\,a^4\,\,$</td><td><code>false</code></td><td>$\,\,a^1\,\,$</td></tr><tr><td>4</td><td><code>11101</code></td><td>$\,\,a^8\,\,$</td><td><code>true</code></td><td>$\,\,a^{1+8}\,\,$</td></tr><tr><td>5</td><td><code>1110</code></td><td>$\,\,a^{16}\,\,$</td><td><code>false</code></td><td>$\,\,a^{1+8}\,\,$</td></tr><tr><td>6</td><td><code>111</code></td><td>$\,\,a^{32}\,\,$</td><td><code>true</code></td><td>$\,\,a^{1+8+32}\,\,\,\,\,\,$</td></tr><tr><td>7</td><td><code>11</code></td><td>$\,\,a^{64}\,\,$</td><td><code>true</code></td><td>$\,\,a^{1+8+32+64}\,\,\,\,\,\,\,\,\,\,$</td></tr><tr><td>8</td><td><code>1</code></td><td>$\,\,a^{128}\,\,$</td><td><code>true</code></td><td>$\,\,a^{1+8+32+64+128}\,\,\,\,\,\,\,\,\,\,\,\,\,\,$</td></tr><tr><td>9</td><td><code>0</code></td><td><code>N/A</code></td><td><code>N/A</code></td><td><code>N/A</code></td></tr></tbody></table></div><h2 id="3"><a href="#3" class="headerlink" title="3?"></a>3?</h2><p><em>其实是为了回答这个问题我才写的这篇博客</em><br>所以，我们能不能把2的幂改成3的？<br>答案是：<strong>可以</strong><br>但是更慢，通过上面的推导，我们应该能发现我们之所以能快速将指数<code>k</code>分解为2的幂的和的形式，是因为我们的电脑是<strong>二进制</strong>存储数据的，我们可以通过位运算很方便的实现这种分解，如果要利用3的幂，我们首先得得到指数的三进制表示，还得定义三进制的位运算，并且<strong>这些都是通过二进制的运算实现的</strong>，舍本逐末了属于是 🤔</p><h2 id="a-n-mod-m"><a href="#a-n-mod-m" class="headerlink" title="$a^n \mod m$"></a>$a^n \mod m$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function">ll <span class="title">fast_pow</span><span class="params">(ll a, ll b, ll mod)</span></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans = ans * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS:若<code>mod</code>为64位整数，则应写成如下形式：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function">ll <span class="title">Product_mod</span><span class="params">(ll a, ll b, ll mod)</span></span>&#123;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) sum = (sum + a) % mod;</span><br><span class="line">        a = (a + a) % c;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">fast_pow</span><span class="params">(ll a, ll b, ll mod)</span></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans = <span class="built_in">Product_mod</span>(ans, a, mod);</span><br><span class="line">        a = <span class="built_in">Product_mod</span>(a, a, mod);</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>主要是为了防止<code>爆 long long</code>，具体原理为：</p><script type="math/tex; mode=display">\begin{split}&a*233 \mod m\\=\,\,&a*(1+8+32+64+128) \mod m\\\Rightarrow \,&a * b\mod m = a * \sum_{i=0}^{k-1} b_i*2^i \mod m\\\end{split}</script><p>其中$b_i\,\,$表示<code>b</code>的二进制第<code>i</code>位</p><h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><p>其实就是把对应的整型换成矩阵而已，需要重载矩阵类的乘法，<br>为了统一，可以写成模板<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">fast_pow</span><span class="params">(T x, ll y)</span></span>&#123;</span><br><span class="line">    T ans = x;</span><br><span class="line">    y --;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ans = ans * x;</span><br><span class="line">            y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            x = x * x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速幂的原理和实现&quot;&gt;&lt;a href=&quot;#快速幂的原理和实现&quot; class=&quot;headerlink&quot; title=&quot;快速幂的原理和实现&quot;&gt;&lt;/a&gt;快速幂的原理和实现&lt;/h1&gt;&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="算法教程" scheme="https://www.crowhsu.top/categories/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://www.crowhsu.top/posts/735e5788.html"/>
    <id>https://www.crowhsu.top/posts/735e5788.html</id>
    <published>2023-01-04T01:09:10.000Z</published>
    <updated>2023-01-12T05:24:16.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="各种排序算法"><a href="#各种排序算法" class="headerlink" title="各种排序算法"></a>各种排序算法</h1><p>手写排序算法主要用在不能用STL的情况，能用STL就用<code>sort</code>就好了</p><h2 id="基本对比"><a href="#基本对比" class="headerlink" title="基本对比"></a>基本对比</h2><div class="table-container"><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n^2)$</td><td>$O(1)$</td><td>稳定</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(1)$</td><td>不稳定</td></tr><tr><td>插入排序</td><td>$O(n^2)$</td><td>$O(1)$</td><td>稳定</td></tr><tr><td>希尔排序</td><td>$O(n\log n)$</td><td>$O(1)$</td><td>不稳定</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n)$</td><td>稳定</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(\log n)$</td><td>不稳定</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(1)$</td><td>不稳定</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(k)$</td><td>稳定</td></tr><tr><td>桶排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>稳定</td></tr><tr><td>基数排序</td><td>$O(n\times k)$</td><td>$O(n+k)$</td><td>稳定</td></tr></tbody></table></div><h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061445433.gif" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n<span class="number">-1</span>-i; ++ j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j+<span class="number">1</span>]&lt;a[j]) <span class="built_in">swap</span>(a[j+<span class="number">1</span>],a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序（Selection-Sort）"><a href="#选择排序（Selection-Sort）" class="headerlink" title="选择排序（Selection Sort）"></a>选择排序（Selection Sort）</h2><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061448130.gif" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectSort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> lowIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[lowIndex]) lowIndex = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(a,lowIndex,i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序（Insertion-Sort）"><a href="#插入排序（Insertion-Sort）" class="headerlink" title="插入排序（Insertion Sort）"></a>插入排序（Insertion Sort）</h2><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061452164.gif" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertSort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="type">int</span> elem = a[i];</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;elem&lt;a[j];j--)&#123;</span><br><span class="line">            a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        a[j+<span class="number">1</span>]=elem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序（Shell-Sort）"><a href="#希尔排序（Shell-Sort）" class="headerlink" title="希尔排序（Shell Sort）"></a>希尔排序（Shell Sort）</h2><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061455002.gif" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertSortGap</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n, <span class="type">int</span> gap)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = gap; i &lt; n; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j - gap &gt;= <span class="number">0</span> &amp;&amp; a[j - gap] &gt; a[j]; j -= gap)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[j], a[j - gap]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellsort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> gap = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(gap &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">insertSortGap</span>(a, n, gap);</span><br><span class="line">        gap &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">insertsort</span>(a, gap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h2><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061455844.gif" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid =  l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid), <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) temp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span> temp[k++] = q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) temp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) temp[k++] = q[j++];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l, j =<span class="number">0</span>; i &lt;= r; i++, j++) q[i] = temp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h2><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061455187.gif" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="堆排序（Heap-Sort）"><a href="#堆排序（Heap-Sort）" class="headerlink" title="堆排序（Heap Sort）"></a>堆排序（Heap Sort）</h2><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061456355.gif" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="计数排序（Counting-Sort）"><a href="#计数排序（Counting-Sort）" class="headerlink" title="计数排序（Counting Sort）"></a>计数排序（Counting Sort）</h2><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061456160.gif" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        a[t]++;</span><br><span class="line">        minn=<span class="built_in">min</span>(minn,t);</span><br><span class="line">        maxn=<span class="built_in">max</span>(maxn,t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = minn; i &lt;= maxn; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a[i]; j ++)&#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="桶排序（Bucket-Sort）"><a href="#桶排序（Bucket-Sort）" class="headerlink" title="桶排序（Bucket Sort）"></a>桶排序（Bucket Sort）</h2><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061515088.gif" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>],t,max=<span class="built_in">sizeof</span>(a)/<span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;max;i++) a[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">        a[t]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;max;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;y&lt;a[k];y++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="基数排序（Radix-Sort）"><a href="#基数排序（Radix-Sort）" class="headerlink" title="基数排序（Radix Sort）"></a>基数排序（Radix Sort）</h2><p><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog202301061456517.gif" alt=""></p><h2 id="STL相关"><a href="#STL相关" class="headerlink" title="STL相关"></a>STL相关</h2><h3 id="qsort"><a href="#qsort" class="headerlink" title="qsort"></a>qsort</h3><p><code>#include &lt;cstdlib&gt;</code><br>C标准库内的快速排序，一般不建议用，优化较差</p><h3 id="std-sort"><a href="#std-sort" class="headerlink" title="std::sort"></a>std::sort</h3><p>c++11 后最坏时间复杂度为 $O(n\log n)$ STL依赖症患者的心头爱</p><h3 id="std-stable-sort"><a href="#std-stable-sort" class="headerlink" title="std::stable_sort"></a>std::stable_sort</h3><p>稳定排序 时间复杂度为 $O(n \log{(n^2)})$, 如果使用额外内存则为 $O(n \log n)$</p><h3 id="std-nth-element"><a href="#std-nth-element" class="headerlink" title="std::nth_element"></a>std::nth_element</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="built_in">nth_elment</span>(first, nth, last);</span><br><span class="line">std::<span class="built_in">nth_element</span>(first, nth, last, cmp);</span><br></pre></td></tr></table></figure><p>查找第n个元素：他会重新排列<code>[first, last)</code>中的元素，使<code>nth</code>所指向的元素被更改为<code>[first, last)</code>排好序后该位置会出现的元素。</p><p><strong>只会将目标元素放在正确位置</strong>，同时保证目标位置左侧严格小，右侧不严格大</p><h2 id="动图来源"><a href="#动图来源" class="headerlink" title="动图来源"></a>动图来源</h2><p><a href="https://www.cnblogs.com/onepixel/articles/7674659.html">十大经典排序算法（动图演示）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;各种排序算法&quot;&gt;&lt;a href=&quot;#各种排序算法&quot; class=&quot;headerlink&quot; title=&quot;各种排序算法&quot;&gt;&lt;/a&gt;各种排序算法&lt;/h1&gt;&lt;p&gt;手写排序算法主要用在不能用STL的情况，能用STL就用&lt;code&gt;sort&lt;/code&gt;就好了&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="算法教程" scheme="https://www.crowhsu.top/categories/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>stl之rope</title>
    <link href="https://www.crowhsu.top/posts/48b938d1.html"/>
    <id>https://www.crowhsu.top/posts/48b938d1.html</id>
    <published>2023-01-03T12:41:18.000Z</published>
    <updated>2023-01-04T01:00:59.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录一下这个“邪门”的STL"><a href="#记录一下这个“邪门”的STL" class="headerlink" title="记录一下这个“邪门”的STL"></a>记录一下这个“邪门”的STL</h1><h2 id="先写好头部"><a href="#先写好头部" class="headerlink" title="先写好头部"></a>先写好头部</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/rope&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"><span class="comment">//看到这里事情已经开始不对劲了</span></span><br></pre></td></tr></table></figure><h2 id="都能做什么"><a href="#都能做什么" class="headerlink" title="都能做什么"></a>都能做什么</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rope test;</span><br><span class="line"> </span><br><span class="line">test.<span class="built_in">push_back</span>(x); <span class="comment">//在末尾添加x</span></span><br><span class="line"> </span><br><span class="line">test.<span class="built_in">insert</span>(pos,x); <span class="comment">//在pos插入x　　</span></span><br><span class="line"> </span><br><span class="line">test.<span class="built_in">erase</span>(pos,x); <span class="comment">//从pos开始删除x个</span></span><br><span class="line"> </span><br><span class="line">test.<span class="built_in">copy</span>(pos,len,x); <span class="comment">//从pos开始到pos+len复制到x</span></span><br><span class="line"> </span><br><span class="line">test.<span class="built_in">replace</span>(pos,x); <span class="comment">//从pos开始换成x</span></span><br><span class="line"> </span><br><span class="line">test.<span class="built_in">substr</span>(pos,x); <span class="comment">//提取pos开始x个</span></span><br><span class="line"></span><br><span class="line">test.<span class="built_in">at</span>(x)/[x]; <span class="comment">//访问第x个元素</span></span><br></pre></td></tr></table></figure><p>看到这里，你可能会想 就这？<br>但是，如果我告诉你 <code>rope</code> 的时间复杂度只有 $O(n\sqrt{n})$，空间复杂度接近 $O(n)$呢<br>震惊吗，我也很震惊，这似乎和 <code>rope</code> 的低层级制有关</p><p><strong>而且可以实现O(1)的复制！！！</strong><br>这意味着我们可以轻松地做到<strong>持久化</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root[i] = <span class="keyword">new</span> <span class="built_in">rope</span>&lt;<span class="type">char</span>&gt;(*root[i<span class="number">-1</span>]);</span><br></pre></td></tr></table></figure><br>==rope是一种非标准的STL函数，也就是说不是所有OJ都支持==😢</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记录一下这个“邪门”的STL&quot;&gt;&lt;a href=&quot;#记录一下这个“邪门”的STL&quot; class=&quot;headerlink&quot; title=&quot;记录一下这个“邪门”的STL&quot;&gt;&lt;/a&gt;记录一下这个“邪门”的STL&lt;/h1&gt;&lt;h2 id=&quot;先写好头部&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="算法教程" scheme="https://www.crowhsu.top/categories/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="STL" scheme="https://www.crowhsu.top/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>寒假集训Day-2题解</title>
    <link href="https://www.crowhsu.top/posts/a721148.html"/>
    <id>https://www.crowhsu.top/posts/a721148.html</id>
    <published>2023-01-03T09:04:28.000Z</published>
    <updated>2023-01-10T03:40:26.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="寒假集训Day-2题解"><a href="#寒假集训Day-2题解" class="headerlink" title="寒假集训Day-2题解"></a>寒假集训Day-2题解</h1><p>今天的笔记还没发，主要是我甚至连昨天的都还没写完😢</p><h2 id="A-Registration-System"><a href="#A-Registration-System" class="headerlink" title="A - Registration System"></a>A - Registration System</h2><p>啥都不说了这题（其实应该可以写字典树）<br><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="type">int</span>&gt; names;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        names[s]++;</span><br><span class="line">        <span class="keyword">if</span>(names[s]==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;OK&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;names[s]<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h2 id="B-Tom-Riddle’s-Diary"><a href="#B-Tom-Riddle’s-Diary" class="headerlink" title="B - Tom Riddle’s Diary"></a>B - Tom Riddle’s Diary</h2><p>这跟第一题不能说是一模一样，<del>只能说是毫无区别</del></p><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="type">int</span>&gt; names;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        names[s]++;</span><br><span class="line">        <span class="keyword">if</span>(names[s] != <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div><h2 id="C-Boxes-Packing"><a href="#C-Boxes-Packing" class="headerlink" title="C - Boxes Packing"></a>C - Boxes Packing</h2><p><strong>题意：</strong> 给定n个箱子，每个箱子都有自己的边长，小箱子可以装进大箱子里，但是只能装一个，问最后能看见多少箱子。<br><strong>思路：</strong> 就是能组成多少个俄罗斯套娃，先贪心一下，从最小的箱子开始，外面套次小的，以此类推，直到没有更大的，这是一个，然后从剩下的箱子里继续找最小的……<br>这样写就能过，但是还有另一种做法，假设一共套了x个娃，则易证：剩下的单独的箱子一定都是相同大小的（假设为y），并且每个套娃都必然包含一个大小为y的箱子，所以实际上只要找出现次数最多的数字就行了</p><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, i;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt; box;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span>(n --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">box[i] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : box) ans = max(ans, x.second);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="D-Indian-Summer"><a href="#D-Indian-Summer" class="headerlink" title="D - Indian Summer"></a>D - Indian Summer</h2><p>跟AB一模一样<br><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> n, ans;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; l;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">        getline(<span class="built_in">cin</span>, s);</span><br><span class="line">        l.insert(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; l.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h2 id="E-New-Year-and-Counting-Cards"><a href="#E-New-Year-and-Counting-Cards" class="headerlink" title="E - New Year and Counting Cards"></a>E - New Year and Counting Cards</h2><p><strong>题意：</strong> 有n张卡牌，每张卡牌上有一个数字和一个字母，但是你只能看到其中一者，你可以选择翻开卡牌来看另一者是什么，现在有规则：元音字母所对数字必然为偶数。问最少翻开多少张卡牌可以确定该牌组满足/不满足规则。<br><strong>思路：</strong> 元音字母所对数字必然为偶数 等价于 奇数所对字母必然为辅音字母 只要判断这两个条件就好了。所以数一数奇数和元音字母的个数</p><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><p>所以这题为啥会出在 <code>STL</code> 里<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c:a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;1&#x27;</span>||c==<span class="string">&#x27;3&#x27;</span>||c==<span class="string">&#x27;5&#x27;</span>||c==<span class="string">&#x27;7&#x27;</span>||c==<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">ans ++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;a&#x27;</span>||c==<span class="string">&#x27;e&#x27;</span>||c==<span class="string">&#x27;i&#x27;</span>||c==<span class="string">&#x27;o&#x27;</span>||c==<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p></div></div><h2 id="F-Right-Left-Cipher"><a href="#F-Right-Left-Cipher" class="headerlink" title="F - Right-Left Cipher"></a>F - Right-Left Cipher</h2><p><strong>题意：</strong> 给定一个字符串，对其进行加密，加密方式为：先写下第一个字母，然后在其右边写下第二个，左边第三个……现在给你密文，要求你解密<br><strong>思路：</strong> 观察规律就好了<br><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="type">int</span> l, r, len;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">len = s.size();</span><br><span class="line">l = len/<span class="number">2</span> - !(len &amp; <span class="number">1</span>);</span><br><span class="line">r = len - l - !(len &amp; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(l &gt; <span class="number">-1</span>) &#123; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s[l--];</span><br><span class="line"><span class="keyword">if</span>(r &lt; len) <span class="built_in">cout</span> &lt;&lt; s[r++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></p><h2 id="G-Travel-Cards"><a href="#G-Travel-Cards" class="headerlink" title="G - Travel Cards"></a>G - Travel Cards</h2><p><strong>题意：</strong> n次出行，每次的花费为a，若上一次终点与本次起点相同，则花费为b，可以购买k张旅行卡，每张花费为f，旅行卡可绑定两个地点，在这两个地点之间的直接通行不需要额外花费<br><strong>思路：</strong> 因为旅行卡的花费不考虑方向，所以可以先把所有需要经过的路径的总花费求出来，然后从最大的开始用旅行卡抵消就可以了<br><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cat(a, b) (a &gt; b ? b + a : a + b)</span></span><br><span class="line"><span class="comment">// 不考虑顺序</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> pre, cur;</span><br><span class="line"><span class="type">int</span> n, a, b, k, f, ans;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; k &gt;&gt; f;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; pre;</span><br><span class="line">        <span class="keyword">if</span>(pre == cur)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; cur;</span><br><span class="line">            mp[cat(pre, cur)] += b;</span><br><span class="line">            ans += b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; cur;</span><br><span class="line">            mp[cat(pre, cur)] += a;</span><br><span class="line">            ans += a;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="built_in">string</span>, <span class="type">int</span>&gt;&gt; cpy(mp.begin(), mp.end());</span><br><span class="line">    <span class="comment">//无法直接对map排序，所有需要一个拷贝</span></span><br><span class="line">    </span><br><span class="line">    sort(cpy.begin(), cpy.end(), [](<span class="type">const</span> <span class="keyword">auto</span> &amp;x, <span class="type">const</span> <span class="keyword">auto</span> &amp;y)&#123;</span><br><span class="line"><span class="keyword">return</span> x.second &gt; y.second;</span><br><span class="line">&#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x = cpy.begin(); x != cpy.end(); x ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;second &lt; f || !(k--)) <span class="keyword">break</span>;</span><br><span class="line">        ans -= x-&gt;second - f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h2 id="H-Anton-and-Lines"><a href="#H-Anton-and-Lines" class="headerlink" title="H - Anton and Lines"></a>H - Anton and Lines</h2><p><strong>题意：</strong> 给定n条直线（斜截式），求某一开区间内是否存在交点<br><strong>分析：</strong> 简单画图可知，某一区间内两条线段有交点（开区间）的充要条件是，左右端点顺序不同（比如 $y<em>{1左} &lt; y</em>{2左}\,\,且\,\,y<em>{1右} &gt; y</em>{2右}$）<br>所以提前处理处所有直线被区间所截线段的左右端点的 y 值，再按左端点 y 排序，看右端点 y 是否也满足非严格递增/递减即可<br><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt;&gt; p;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n, k, b;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> l, r;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;n, &amp;l, &amp;r);</span><br><span class="line"><span class="keyword">while</span>(n --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;k, &amp;b);</span><br><span class="line">p.push_back(<span class="built_in">make_pair</span>(k * l + b, k * r + b));</span><br><span class="line">&#125;</span><br><span class="line">sort(p.begin(), p.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x = p.begin() + <span class="number">1</span>; x != p.end(); x ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x-&gt;second &lt; (x - <span class="number">1</span>)-&gt;second)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h2 id="I-Block-Towers"><a href="#I-Block-Towers" class="headerlink" title="I - Block Towers"></a>I - Block Towers</h2><p><strong>题意：</strong> 有n个塔，每个塔有一定数量的方块，你只能从高的塔上拿一个方块放到较矮的塔上，问不限次操作后，第一个塔上最多有多少方块</p><p><strong>思路：</strong> 很简单，每次找到大于第一座塔的最小值，然后全挪过来即可($a_1 = \left \lceil \frac{a_1 + a_i}{2} \right \rceil $)</p><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> t, n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">sort(a + <span class="number">2</span>, a + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) </span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; a[<span class="number">1</span>])</span><br><span class="line">a[<span class="number">1</span>] = <span class="type">int</span>(<span class="built_in">ceil</span>((a[<span class="number">1</span>] + a[i])/<span class="number">2.0</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="J-Database"><a href="#J-Database" class="headerlink" title="J - Database"></a>J - Database</h2><p>AB翻版</p><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> T, N, R, I, C;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= T; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">mp.clear();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;R);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; R; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;I, &amp;C);</span><br><span class="line">mp[to_string(I) + to_string(C)] ++;</span><br><span class="line"><span class="keyword">if</span>(mp[to_string(I) + to_string(C)] &gt; <span class="number">1</span>) flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d: impossible\n&quot;</span>, j);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d: possible\n&quot;</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="K-SOLVEIT"><a href="#K-SOLVEIT" class="headerlink" title="K - SOLVEIT"></a>K - SOLVEIT</h2><p><strong>题意：</strong> 这个题我真的读了好几遍才读懂😢，就是给你一个数组，每次对其中的某一位置进行标记，或者对某一位置进行询问，询问就是找到下标大于等于给定值的有标记的最小下标<br><strong>思路：</strong> 就硬写，每次标记向前遍历到上一个标记位置，全部指向此标记下标即可</p><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="type">bool</span> b[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> t, k;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">-1</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;t, &amp;k);</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = k; j &gt;= <span class="number">1</span> &amp;&amp; !b[j]; j --) a[j] = k;</span><br><span class="line">b[k] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div><h2 id="L-Ada-and-List"><a href="#L-Ada-and-List" class="headerlink" title="L - Ada and List"></a>L - Ada and List</h2><p>这个就不用说题意了吧，就是模拟链表<br>但是时间卡的太死了（也可能是我菜）<code>vector</code>和<code>dequeue</code>都tle了，最后只好动用终极杀器 <code>rope</code></p><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/rope&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line">using namespace __gnu_cxx;</span><br><span class="line">rope&lt;<span class="type">int</span>&gt; r;</span><br><span class="line"><span class="type">int</span> n, m, a;</span><br><span class="line"><span class="type">int</span> op, k, x;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> &amp;x)</span>&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> c = getchar();</span><br><span class="line"><span class="keyword">while</span>(c &gt; <span class="string">&#x27;9&#x27;</span> || c &lt; <span class="string">&#x27;0&#x27;</span>) c = getchar();</span><br><span class="line"><span class="keyword">while</span>(c &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; c &gt;= <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">x = <span class="number">10</span> * x + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">read(a);</span><br><span class="line">r.push_back(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m --)&#123;</span><br><span class="line">read(op), read(k);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">read(x);</span><br><span class="line">r.insert(k - <span class="number">1</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">r.erase(k - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, r[k - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="M-Reduce-the-array"><a href="#M-Reduce-the-array" class="headerlink" title="M - Reduce the array"></a>M - Reduce the array</h2><p><strong>题意(合并果子)：</strong> 有n堆果子，每一次可以合并两堆果子，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过n-1次合并之后，就只剩下一堆了。求最少消耗。<br><strong>思路：</strong> 贪心即可，如果每一步所消耗的力气最少，那么n-1步后，所消耗的总力气就是最小的。也就是说每次合并后的都要进行排序，直接使用优先队列，以重量为优先级。</p><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> T, n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="type">int</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; p;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">p.push(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>, xx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p.size() &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">xx = p.top();</span><br><span class="line">p.pop();</span><br><span class="line">xx += p.top();</span><br><span class="line">p.pop();</span><br><span class="line">sum += xx;</span><br><span class="line">p.push(xx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;寒假集训Day-2题解&quot;&gt;&lt;a href=&quot;#寒假集训Day-2题解&quot; class=&quot;headerlink&quot; title=&quot;寒假集训Day-2题解&quot;&gt;&lt;/a&gt;寒假集训Day-2题解&lt;/h1&gt;&lt;p&gt;今天的笔记还没发，主要是我甚至连昨天的都还没写完😢&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://www.crowhsu.top/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ACM,集训" scheme="https://www.crowhsu.top/tags/ACM-%E9%9B%86%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>寒假集训Day-1题解</title>
    <link href="https://www.crowhsu.top/posts/3b9a0bd5.html"/>
    <id>https://www.crowhsu.top/posts/3b9a0bd5.html</id>
    <published>2023-01-02T06:06:34.000Z</published>
    <updated>2023-01-02T13:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="寒假集训Day-1题解"><a href="#寒假集训Day-1题解" class="headerlink" title="寒假集训Day-1题解"></a>寒假集训Day-1题解</h1><p>截至目前为止我只做完了A~H，至于I……只能等大佬了……<br>21:39：I 终于做出来了，临时学的主席树，但是已经有大佬拿掉了一血<br>至于原题好像都是cf上的？<br><a class="btn-beautify pink" href="https://vjudge.net/contest/536618#problem"   title="原题通道-viudge"><span>原题通道-viudge</span></a></p><h2 id="A-Everyone-Loves-to-Sleep"><a href="#A-Everyone-Loves-to-Sleep" class="headerlink" title="A - Everyone Loves to Sleep"></a>A - Everyone Loves to Sleep</h2><p>先把所有时间换算成按分钟来计算时间，进行比较，得到一个最小的差值即可。为了考虑跨过零点的情况，对一天的分钟数取余即可。<br><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">24</span>*<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n, h, m, H, M;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> res = x*<span class="number">60</span> + y + N - H*<span class="number">60</span> - M;</span><br><span class="line">    res %= N;</span><br><span class="line">    <span class="keyword">return</span> res &gt;= <span class="number">0</span> ? res : N + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y, ans = N + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; H &gt;&gt; M;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n ; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            ans = min(ans, f(x, y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans/<span class="number">60</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans%<span class="number">60</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h2 id="B-Another-String-Minimization-Problem"><a href="#B-Another-String-Minimization-Problem" class="headerlink" title="B - Another String Minimization Problem"></a>B - Another String Minimization Problem</h2><p><strong>题意：</strong>有一串长度为m，元素全是B的字符串s，通过n次操作，获得字典序最小的字符串。<br>对每次操作，有一个操作数a，要么 <code>s[a]</code> 变成A或者 <code>s[m+1-a]</code> 变A。<br><strong>思路：</strong>为了保证字典序最小，每次只要取<code>min(a,m+1-a)</code>进行操作即可，若已经转变为A了，再转换较大的数<br><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="type">int</span> t, n, m, a;</span><br><span class="line"><span class="type">char</span> b[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="string">&#x27;B&#x27;</span>, <span class="keyword">sizeof</span> b);</span><br><span class="line"><span class="type">bool</span> vis[N] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n ; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">a = <span class="built_in">min</span>(a, m + <span class="number">1</span> - a);</span><br><span class="line"><span class="keyword">if</span>(!vis[a])</span><br><span class="line">&#123;</span><br><span class="line">vis[a] = <span class="literal">true</span>;</span><br><span class="line">b[a] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">vis[m + <span class="number">1</span> - a] = <span class="literal">true</span>;</span><br><span class="line">b[m + <span class="number">1</span> - a] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-*.*s\n&quot;</span>, m, m, b + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实 <code>vis[]</code> 没啥必要</p></div></div></p><h2 id="C-2-3-Moves"><a href="#C-2-3-Moves" class="headerlink" title="C - 2-3 Moves"></a>C - 2-3 Moves</h2><p><strong>题意：</strong> 每次可以移动2或3个单位长度，从原点到n最少要移动多少次</p><p><strong>思路：</strong> <del>易证：</del> $当|n|\ge 4时,ans = \left \lceil \frac{|n|}{3} \right \rceil $</p><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>) cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>) cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">3</span>) cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="built_in">int</span>(<span class="built_in">ceil</span>(n / <span class="number">3.0</span>)) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div><h2 id="D-Crossmarket"><a href="#D-Crossmarket" class="headerlink" title="D - Crossmarket"></a>D - Crossmarket</h2><p><strong>题意：</strong>现有两人P，Q，P要从左下角走到右上角，Q要从左上角走到右下角，P每走一格会在当前格制作一个传送门，当某一人在一个有传送门的格子时，可以传送到另一个具有传送门的格子，每走一格需要一个单位的能量，问两人最少一共需要多少能量<br><strong>思路：</strong>显然，P需要的能量是固定的<code>m + n - 2</code>(曼哈顿距离)，而Q因为有P的传送，所以只要选择行列中较小的一个一直走，外加一次传送，即<code>min(m, n)</code><br><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">1</span> &amp;&amp; n == <span class="number">1</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; n + m - <span class="number">2</span> + <span class="built_in">min</span>(n , m) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h2 id="E-Also-Try-Minecraft"><a href="#E-Also-Try-Minecraft" class="headerlink" title="E - Also Try Minecraft"></a>E - Also Try Minecraft</h2><p><strong>题意：</strong> 给定长度为n的数组，求特定区间内的总上升行程/下降行程长度<br><strong>思路：</strong> 前缀和+后缀和<br><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">LL up[N], down[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) up[i] = up[i - <span class="number">1</span>] + <span class="built_in">max</span>(<span class="number">0</span>, a[i - <span class="number">1</span>] - a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i --) down[i] = down[i + <span class="number">1</span>] + <span class="built_in">max</span>(<span class="number">0</span>, a[i + <span class="number">1</span>] - a[i]);</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,down[r] - down[l]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,up[r] - up[l]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经某佬提醒，发现其实不用求后缀和，但是已经AC了就没写</p></div></div></p><h2 id="F-Madoka-and-Formal-Statement"><a href="#F-Madoka-and-Formal-Statement" class="headerlink" title="F - Madoka and Formal Statement"></a>F - Madoka and Formal Statement</h2><p><strong>题意：</strong> 给定一个数组a和数组b，每次操作为：如果<code>a[i] &lt;= a[(i + 1) % n]</code> 那么 <code>a[i] ++</code> ，请问能否经过若干次操作使得a数组和b数组相等。<br><strong>思路：</strong> 显然只要存在 <code>a[i] &gt; b[i]</code> 就不成立，而我们要使 <code>a[i] == b[i]</code> 就要 <code>a[i]</code> 自增 <code>b[i] - a[i]</code> 次，所以只要判断 <code>b[i] &lt;= b[i + 1] + 1</code>即可<br><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line">LL T,n,M;</span><br><span class="line">LL a[N],b[N]; </span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T --)&#123;</span><br><span class="line">        M = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> ans = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;b[i]);</span><br><span class="line">        a[n + <span class="number">1</span>] = a[<span class="number">1</span>], b[n + <span class="number">1</span>] = b[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] == b[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; b[i] || b[i] &gt; b[i+<span class="number">1</span>] + <span class="number">1</span>)&#123;</span><br><span class="line">            ans = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h2 id="G-Emotes"><a href="#G-Emotes" class="headerlink" title="G - Emotes"></a>G - Emotes</h2><p><strong>题意：</strong> 给出n个表情，每个表情有一定的快乐值，求用m个表情，每个表情连续不超过k次的前提下，最大的欢乐值<br><strong>思路：</strong> 贪心即可：一直选现在能选的快乐值最大的，也就是 <code>最大的 * k + 次大的 * 1</code> 无限循环<br><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">100</span>;</span><br><span class="line">LL a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL n, m, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="built_in">sort</span>(a, a + n, [](<span class="type">int</span> a, <span class="type">int</span> b)&#123;<span class="keyword">return</span> a &gt; b;&#125;);</span><br><span class="line">LL x = m / (k + <span class="number">1</span>), y = m % (k + <span class="number">1</span>);</span><br><span class="line">LL sum = (k * a[<span class="number">0</span>] + a[<span class="number">1</span>]) * x + y * a[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h2 id="H-Magical-Array"><a href="#H-Magical-Array" class="headerlink" title="H - Magical Array"></a>H - Magical Array</h2><p><strong>题意：</strong> 给定n个初始值相同的数组，共有两种操作：</p><ul><li><code>选择一对(i,j),a[i-1]++,a[i]--,a[j]--,a[j+1]++</code></li><li><code>选择一对(i,j),a[i-1]++,a[i]--,a[j]--,a[j+2]++</code><br>只有一个数组被执行了若干次2 22操作，问哪个数组被执行了操作2 22，操作了多少次<br><strong>思路：</strong> 其实是 <del>物理题</del>，把数组理解为一个条状物，每个元素就是这个条状物上的一段单位长度，则根据质心守恒，操作一无法改变系统质心，操作二会使质心右偏，但是我们不用真的求出质心，只要比较相对大小就可以了</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        LL minn = <span class="number">9e17</span>, maxn = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> id = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            LL sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line">            &#123;</span><br><span class="line">                LL x;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">                sum += x * j;</span><br><span class="line">            &#125;</span><br><span class="line">            minn = <span class="built_in">min</span>(sum, minn);</span><br><span class="line">            maxn = <span class="built_in">max</span>(sum, maxn);</span><br><span class="line">            <span class="keyword">if</span>(maxn == sum) id = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %lld\n&quot;</span>, id, maxn - minn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="I-Katya-and-Segments-Sets"><a href="#I-Katya-and-Segments-Sets" class="headerlink" title="I - Katya and Segments Sets"></a>I - Katya and Segments Sets</h2><p>最难得一题<br><strong>题意：</strong> <code>k</code> 条线段，每条线段有一个颜色，颜色编号为 <code>1~n</code>，有 <code>m</code> 次询问 <code>a b x y</code>:<br>是否对任意 <code>[a,b]</code>，都有对应颜色的线段被 <code>[x,y]</code> 覆盖<br><strong>思路：</strong><br>首先只考虑一个集合，（我押中题了哈哈哈，只考虑一个集合的情况我前几天才做过，虽然没啥用），用 <code>f[x]</code> 表示 大于等于 <code>x</code> 的最小右端点，则只需判断 <code>f[x] ≤ y</code> 或者反过来也可以（比如我写的就是反过来的）<br>然后对于多个集合我们只要分别判断就可以了<br>刚好可以写一颗 <strong>最大值线段树</strong>，但是对每次询问都建一棵树不现实，所以考虑用 <strong>主席树</strong> 存储</p><div class="hide-block"><button type="button" class="hide-button" style="">题解    </button><div class="hide-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; Hash;</span><br><span class="line"><span class="comment">//经典离散化，我习惯用vector</span></span><br><span class="line"><span class="comment">//但用int[]也可以</span></span><br><span class="line"><span class="type">int</span> idx, root[N];</span><br><span class="line"><span class="comment">//存储不同拷贝</span></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> a, b, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; <span class="number">0</span> &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">    s = s*<span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//经典快读</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r, color;</span><br><span class="line">&#125;tree[N * <span class="number">22</span>], ori[N];</span><br><span class="line"><span class="comment">//ori[]是初始输入 tree[]是主席树本体 </span></span><br><span class="line"><span class="comment">//其实这里的变量名有误，</span></span><br><span class="line"><span class="comment">//对于ori来说是color，但对于tree来说应该是val(最小值)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> &amp;cur, <span class="type">int</span> pre, <span class="type">int</span> pos, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    cur = ++ idx;</span><br><span class="line">    tree[cur] = tree[pre];</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        tree[cur].color = <span class="built_in">max</span>(tree[cur].color, val);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) <span class="built_in">update</span>(l, mid, tree[cur].l, tree[pre].l, pos, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(mid + <span class="number">1</span>, r, tree[cur].r, tree[pre].r, pos, val);</span><br><span class="line">    tree[cur].color = <span class="built_in">min</span>(tree[tree[cur].l].color, tree[tree[cur].r].color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主席树模板，以颜色编号为位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> rt, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> tree[rt].color;</span><br><span class="line"><span class="comment">//覆盖即可返回</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid) res = <span class="built_in">min</span>(res, <span class="built_in">query</span>(tree[rt].l, l, mid, L, R));</span><br><span class="line">    <span class="keyword">if</span>(R &gt;= mid + <span class="number">1</span>) res = <span class="built_in">min</span>(res, <span class="built_in">query</span>(tree[rt].r, mid + <span class="number">1</span>, r, L, R));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次询问对应版本</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>(), k = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)&#123;</span><br><span class="line">        ori[i].l = <span class="built_in">read</span>(), Hash.<span class="built_in">push_back</span>(ori[i].r = <span class="built_in">read</span>()), ori[i].color = <span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    Hash.<span class="built_in">erase</span>(<span class="built_in">unique</span>(Hash.<span class="built_in">begin</span>(), Hash.<span class="built_in">end</span>()), Hash.<span class="built_in">end</span>());<span class="comment">//去重</span></span><br><span class="line">    <span class="built_in">sort</span>(Hash.<span class="built_in">begin</span>(), Hash.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(ori + <span class="number">1</span>, ori + <span class="number">1</span> + k, [](<span class="type">const</span> node &amp;a, <span class="type">const</span> node &amp;b)&#123;<span class="keyword">return</span> a.r &lt; b.r;&#125;);</span><br><span class="line">    <span class="comment">//排序，这样生成的主席树才可减</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, n, root[i], root[i - <span class="number">1</span>], ori[i].color, ori[i].l);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        a = <span class="built_in">read</span>(), b = <span class="built_in">read</span>(), x = <span class="built_in">read</span>(), y = <span class="built_in">read</span>();</span><br><span class="line"><span class="comment">//这里的 upper_bound(Hash.begin(), Hash.end(), y) - Hash.begin()</span></span><br><span class="line"><span class="comment">//就是离散化，因为我们只关注大小，不关注具体的值</span></span><br><span class="line"><span class="comment">//所以用排序后的序号表示原来的数</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">query</span>(root[<span class="built_in">upper_bound</span>(Hash.<span class="built_in">begin</span>(), Hash.<span class="built_in">end</span>(), y) - Hash.<span class="built_in">begin</span>()], <span class="number">1</span>, n, a, b) &gt;= x) <span class="built_in">puts</span>(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">        <span class="comment">//在线的，我这个改了几遍才发现，笑死</span></span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>全部完成之后会得到一个 <code>Happy New Year!</code> 乐</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;寒假集训Day-1题解&quot;&gt;&lt;a href=&quot;#寒假集训Day-1题解&quot; class=&quot;headerlink&quot; title=&quot;寒假集训Day-1题解&quot;&gt;&lt;/a&gt;寒假集训Day-1题解&lt;/h1&gt;&lt;p&gt;截至目前为止我只做完了A~H，至于I……只能等大佬了……&lt;br&gt;21</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://www.crowhsu.top/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>在VScode中编写html+css</title>
    <link href="https://www.crowhsu.top/posts/130da42f.html"/>
    <id>https://www.crowhsu.top/posts/130da42f.html</id>
    <published>2022-12-30T02:20:48.000Z</published>
    <updated>2022-12-30T03:06:29.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在VScode中编写html-css"><a href="#在VScode中编写html-css" class="headerlink" title="在VScode中编写html+css"></a>在VScode中编写html+css</h1><h2 id="安装编辑用拓展"><a href="#安装编辑用拓展" class="headerlink" title="安装编辑用拓展"></a>安装编辑用拓展</h2><p>打开拓展(<code>ctrl</code> + <code>shift</code> + <code>X</code>)<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog20221230084551.png" alt=""><br>搜索“html”，然后安装 <code>HTML Snippets</code> 、 <code>HTML CSS Support</code> 和 <code>IntelliSense for CSS class names in HTML</code></p><h2 id="安装浏览用拓展"><a href="#安装浏览用拓展" class="headerlink" title="安装浏览用拓展"></a>安装浏览用拓展</h2><p>选择适合自己的一款即可</p><ul><li>安装 <code>open in browser</code> ， 现在可以右键html文件选择<code>open in default browser</code> 在默认浏览器中打开 或者 <code>open in other browser</code> 在其他浏览器中打开 （每次更改文件后需要保存文件并刷新网页）</li><li>安装 <code>live server</code> ， 点击右下角 <code>Go live</code> ， 即可在浏览器中打开 （每次更改文件后只需保存文件）</li><li>安装 <code>live server preview</code> ，按 <code>F1</code> 打开命令行，输入 <code>show live server preview</code> ，浏览页面内嵌到VScode中 </li></ul><h2 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h2><ul><li>Auto Rename Tag<ul><li>在你修改开始(结束)标签时自动修改结束(开始)标签</li></ul></li><li>px to rem &amp; rpx &amp; vw (cssrem)<ul><li><a href="https://github.com/cipchk/vscode-cssrem/blob/HEAD/README.zh-CN.md">官方文档(中文)</a></li><li>一个 px 与 rem 单位互转的 VSCode 插件</li></ul></li><li><p>Image preview</p><ul><li>在文件中即可显示引用图片<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog20221230104925.png" alt=""></li></ul></li><li><p>CSS Peek</p><ul><li>This extension extends HTML and ejs code editing with Go To Definition and Go To Symbol in Workspace support for css/scss/less (classes and IDs) found in strings within the source code.</li><li>选中样式，按 <code>F12</code> 即可跳转到定义（CSS多的时候真的很好用）</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在VScode中编写html-css&quot;&gt;&lt;a href=&quot;#在VScode中编写html-css&quot; class=&quot;headerlink&quot; title=&quot;在VScode中编写html+css&quot;&gt;&lt;/a&gt;在VScode中编写html+css&lt;/h1&gt;&lt;h2 id=&quot;安</summary>
      
    
    
    
    <category term="语法教程" scheme="https://www.crowhsu.top/categories/%E8%AF%AD%E6%B3%95%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>在VScode中搭建Python环境</title>
    <link href="https://www.crowhsu.top/posts/2cd2b7cf.html"/>
    <id>https://www.crowhsu.top/posts/2cd2b7cf.html</id>
    <published>2022-12-30T00:42:44.000Z</published>
    <updated>2023-01-02T13:45:31.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在VScode中搭建Python环境"><a href="#在VScode中搭建Python环境" class="headerlink" title="在VScode中搭建Python环境"></a>在VScode中搭建Python环境</h1><h2 id="安装python拓展"><a href="#安装python拓展" class="headerlink" title="安装python拓展"></a>安装python拓展</h2><p>打开拓展(<code>ctrl</code> + <code>shift</code> + <code>X</code>)<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog20221230084551.png" alt=""><br>在搜索栏中输入“Python” （你不需要输入双引号），然后安装第一个即可<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog20221230084810.png" alt=""><br>这可以为你的VScode提供基本的代码编辑、调试、虚拟环境配置能力。<br>现在，新建一个<code>.py</code>文件，使用VScode打开它，你将在下边栏中看见您的Python版本，您可以通过单击它的方式更换版本。<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blogPython.gif" alt=""></p><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><ul><li>打开终端<ul><li>打开终端的方式有很多 <del>回字的四种写法</del> </li><li>使用 <code>ctrl</code> + <code>shift</code> + <code>P</code> 或 <code>F1</code> 打开命令面板，输入 <code>终端</code> 或 <code>Toggle</code> ，点选 查看：切换终端</li><li>直接使用快捷键 <code>ctrl</code> + <code>` </code>（但不知道为什么我现在用不了这个快捷键）</li><li>直接在菜单栏中选择 <code>终端</code> - <code>新建终端</code></li></ul></li><li>在终端中输入命令 <code>python3 -m venv &#123;name&#125;</code> 或 <code>python -m venv &#123;name&#125;</code>  其中的 <code>&#123;name&#125;</code> 替换成你想要的虚拟环境的名称</li><li>此时 VScode 会弹出提示框询问你是否使用新的虚拟环境，点击 “是”</li><li>此时你应该可以在左侧根目录下见到新创建的 <code>&#123;name&#125;</code> 文件夹，此处以 <code>venv</code> 为例，运行命令：<ul><li><code>.\venv\Scripts\activate.bat</code> windows-cmd</li><li><code>.\venv\Scripts\activate.ps1</code> windows-powershell</li><li><code>source ~/venv/bin/activate</code> mac</li></ul></li><li>然后你的命令行提示符前应该会出现 <code>(venv)</code><br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blogPowershellVenv.gif" alt=""></li><li>如果想要停用环境，使用 <code>deactivate</code><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2>打开运行和调试（<code>ctrl</code> + <code>shift</code> + <code>D</code>）<br>点击 <code>创建 launch.json 文件</code>，选择 <code>Python</code> <code>Python File</code><br>关闭打开的.json文件即可</li></ul><h2 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h2><ol><li>autoDocstring<ol><li>Visual Studio Code extension to quickly generate docstrings for python functions.</li><li>输入三引号直接回车，可以帮助你为函数写简单的注释。<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blogPythonDoc.gif" alt=""></li></ol></li><li>AREPL for python<ol><li>AREPL automatically evaluates python code in real-time as you type.</li><li>点击右上角的“猫”，此插件会“实时运行”你的Python程序。<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blog20221230095214.png" alt=""></li></ol></li><li>python snippets<ol><li>A snippet pack to make you more productive working with python</li><li>它包含了大量的内置方法，以及string、list、sets、tuple、dictionary、class代码片段，并且还为每个代码段提供至少一个示例。<br><img src="https://picbed-1304952903.cos.ap-beijing.myqcloud.com/pic/blogSnippet.gif" alt=""></li></ol></li><li>Pylance<ol><li>实现类型信息，自动导入，类型检查，代码大纲等功能</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在VScode中搭建Python环境&quot;&gt;&lt;a href=&quot;#在VScode中搭建Python环境&quot; class=&quot;headerlink&quot; title=&quot;在VScode中搭建Python环境&quot;&gt;&lt;/a&gt;在VScode中搭建Python环境&lt;/h1&gt;&lt;h2 id=&quot;安</summary>
      
    
    
    
    <category term="语法教程" scheme="https://www.crowhsu.top/categories/%E8%AF%AD%E6%B3%95%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
</feed>
